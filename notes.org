#+STARTUP: inlineimages overview

* Everything goes here
** Org mode
:PROPERTIES:
:ID:       5c2ad23d-b530-4671-bd70-05380e417f81
:END:
Everything i usually use in org-mode
*** Resources
Useful resources:
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
*** Initial comfortable setup
I find this initial setup quite comfortable to use.
Add below to your config =init.el= file:

#+begin_sr emacs-lisp
(defun orgmode-setup ()
  (progn
    (require 'org-tempo)
    (org-indent-mode)
    (setq org-id-link-to-org-use-id t))
  )
(add-hook 'org-mode-hook 'orgmode-setup)
#+end_src
*** Enable indentation mode
To enable indentation mode (looks a bit better), add this to your
~init.el~ file:

#+begin_src emacs-lisp
(defun orgmode-setup ()
(progn (org-indent-mode)))
(add-hook 'org-mode-hook 'orgmode-setup)
#+end_src

*** Fast insertion of code blocks (and any other templates)

In order to faster insert code blocks in org mode, use either:
1. =C-c C-,= and select a template to insert
2. Enable =org-tempo= by adding below line to your =init.el= file:

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

Then, you can insert a code block by just typing =<s <TAB>=

*** Formatting
:PROPERTIES:
:ID:       ec16ac95-93f6-46fd-938a-a4d93ce52856
:END:
- /italic/
- *bold*
- _underscore_
- =verbatim=
- ~code~
- +strikethrough+

*** Tables
Any line starting with =|= symbol is interpreted as a table.  For
example wtite =|Name|Surname|Age + <TAB>= and you will start a table
**** TODO Useful shortcuts
*** Add file to org-agenda
:PROPERTIES:
:ID: 1ed495c7-4875-4d98-88c7-511718c4850e
:END:

Use function =org-agenda-file-to-front=, or shortcut =C-c [=.  This
will add/move the file to the front of variable list
=org-agenda-files= If you add a directory, it will add all the files
from this directory.

*** Searching in org-mode
You can use your agenca (=C-c a=) as a search engine.

A good resource on this search -
[[https://orgmode.org/worg/org-tutorials/advanced-searching.html]]

1. Make sure all your files/directories are added visible to agenda
   (see [[id:1ed495c7-4875-4d98-88c7-511718c4850e][Add file to org-agenda]])
2. Enter agenda search view with =C-c a s=
3. Here you can search either simple strings - =ex: mystring=, or
   search multiple keywords (=+type +class= will search for entries
   containing both words =type= and =class=).

*NOTE:* If search doesn't start with a character like =+, -, \*= it
will be interpreted as a literal string search

*NOTE:* If you use minus sign instead of plus, you will exclude a
word, so =+type -class= will search for all entries containing =type=
and not contianing =class= You can also search on regulas expressions,
example =+{type\|class}= will search entries containing =type= or
=class= keywords (notice the escaped /pipe/ character)
*** Add image to org file
An image is just a link without protocol

#+begin_example
[[./images/image-of-cat.jpg]]
#+end_example


**** Display inline image
To display the image inline, use =C-c C-x C-v= (/org-toggle-inline-images/)
As an alternative, set the startup buffer variable at the top of the file (see In-buffer settings manual page)

#+begin_example
#+STARTUP: inlineimages
#+end_example

**** Set inline image size (width/height)
When adding a image, you can specify a property for inline display:

#+begin_example
#+attr_org: :width 100
[[./images/image-of-cat.jpg]]
#+end_example

*** Edit code blocks in a separate buffer
If you have a code/source block and you want to edit it in it's own language
mode, you can press =C-c '= and a new buffer will be opened where you can edit
the code. Then, after you're done, press =C-c '= again and code will be
transferred to org mode source block
*** Attachments :ATTACH:
:PROPERTIES:
:ID:       0dfe28aa-0391-4ba4-a70b-07427dd31f6d
:END:
To attach a file to an org document, use the ~M-x org-attach~ command
It will present you some options on what to attach.
To attach images, you can use packages like ~org-download~ or ~org-attach-screenshot~ but it's hardly worth it, ~org-attach-screenshot~ was even crashing my machine.

Setting up below in your init.el file will actually store a link to the attachment, so it can be easily inserted as a link
#+begin_src emacs-lisp
(setq org-attach-store-link-p 'attached)
#+end_src

Example below:
- Attach the file using ~C-c C-a u~ and pasting the url
- Link the file using ~C-c C-l~ and selecting the attached file
- (Optional) adding the ~#+attr_org~ parameters to set file width

#+attr_org: :width 500
[[attachment:1200px-Org-mode-unicorn.svg.png]]

** Emacs
:PROPERTIES:
:ID:       b01035fa-063f-410e-9ea9-94167530cc02
:END:

Notes on emacs itse
*** Disable annoying backup files

**** Specify another directory

For more info, see info:emacs#Backup To stop emacs from making backup files in
the same directory, you can add following to your =init.el= file:

#+begin_src emacs-lisp
;; Backup to another directory
(setq backup-directory-alist '(("." . "~/.emacs.backups")))
 #+end_src

You can then create a directory as specified and all backup files will
go in there.

**** Disable backups

To disable making backup files at all, set below variable:

#+begin_src emacs-lisp
(setq make-backup-files -1)
#+end_src
*** Drawing ascii diagrams
Easiest way to draw ascii diagrams in emacs is [[https://asciiflow.com][asciiflow]]

*** Write code blocks in language mode
You can write a source block in a separate window with it's appropriate mode
turned on by pressing =C-c '= shortcut. When done, press =C-c '= again to
finish editing.
*** Return back after search
After typing =C-s search string= in emacs and navigating through results, you might
want to return back to original position.
You can do this with =C-u C-SPACE=. What it does it pops marks from the mark
ring, that is filled when you jump.
*** Add more refile targets
In order to add more headings and files when using [[help:org-refile][org-refile]] command (=C-c C-w=), you can
customize the [[help:org-refile-targets][org-refile-targets]] variable.

Examples:
#+begin_src emacs-lisp
  (setq org-refile-targets
        '((nil . (:level . 1))  ;; Here nil means search only current buffer
          (org-agenda-files . (:maxlevel . 2)))) ;; Search in org-agenda files
#+end_src

#+RESULTS:
: ((nil :level . 1) (org-agenda-files :maxlevel . 2))
*** Disable bell from ringing in emacs
Add this to your =init.el= file - ~(setq ring-bell-function 'ignore)~
** Misc
*** Haircut
Notes about self haircut, whatever:
**** Guard sizes
|-------------------------------------+--------------------------|
| Clipper Guard Number                | Size in Millimeters (mm) |
|-------------------------------------+--------------------------|
| Number 0 (or 1/2 for Wahl Clippers) |                      1.5 |
| Number 1                            |                        3 |
| Number 2                            |                        6 |
| Number 3                            |                       10 |
| Number 4                            |                       13 |
| Number 5                            |                       16 |
| Number 6                            |                       19 |
| Number 7                            |                       22 |
| Number 8                            |                       25 |
| Number 10                           |                       32 |
| Number 12                           |                     37.5 |
|-------------------------------------+--------------------------|
**** Instructions
- Sides: Start with 10mm, then, if too long lower to max 6mm
- Top sides of the head (to take the bulk off): again, start with 10mm, if
  nothing is going off, lower to max 6-7mm.
- Top of the head: 10mm, if nothing going off lower to 9mm (*not less*)
**** Haircut videos:
[[https://www.youtube.com/watch?v=wNlxye9kF2E][How to Cut the Sides of Your Own Hair | The Up and Down Method]]

* Programming
** General
*** Workflow. In this order:
When working on a feature, i will usually follow below steps:

1. Make it work
2. Make it fast
3. Make it pretty
4. Make it clean (refactor)
*** Cheat Sheets
Good online cheat sheets - [[https://devhints.io/]]
Command line cheat sheet - [[https://cheat.sh/]]
*** Enterprise application (from the book about patterns)
**** Definition of an Enterprise application
From the book =Patterns of enterprise applications architecture=
Some might say that enterprise applications are just big systems, but there are plenty of large projects that are not enterprise applications.
My understanding of enterprise applications is that. Those are systems integrated very closely with business processes (or driving business processes). Like for example payroll, logistic applications and warehouse management systems, financial applications etc. Those applications often operate with data and this data needs to persist somewhere. Enterprise applications are often built around some business rules, and Layered architecture is very helpful with this. By isolating business rules to a separate layer, it will be easier to change (and business rules are something that changes a lot)
**** How to measure performance
There are many measurements that can be done for enterprise apps:

- Response time
- Responsiveness
- How Response or responsiveness change under load
- Scalability
- Performance (transactions per second)
*** Design resources
- https://css-tricks.com/
- https://www.refactoringui.com/
*** Writing notes
**** Focus on understanding
- think broader, try to find counterarguments to your ideas and understandings.
- writing effective notes involves reading, thinking and writing down your understanding (in your own words, concise) of what you just read. If you understood something, you must likely also remembered it.
**** How to take smart notes
//From the book 'How to take smart notes' or something//
- don't use complicated techniques and tools
- Keep all your unfinished tasks and projects written down, in order to free your working memory. (let your brain do more thinking than memorization). Bullet journaling might help with that.
- revisit your notes and try to link them in different ways in order to generate new ideas.
- don't multitask, it's impossible. multitasking is just fast switching of tasks. it's better to focus on one task at a time to preserve energy
- willpower is a finite resource that requires time to recover.
***** Linking smart notes
By finding the essence of the ideas and linking it with other notes we create a dialog between the notes and take them out of context, which can bring us to new inferences (ideas):

- when adding a note, think in which context will you must likely come across it and link it accordingly (for example if your write about a framework, you can link it with the language, the pattern this framework is using or type of projects it might be used in)
- add tags based on concrete topic of the note, not abstract or grouping keywords.
- making smart notes with links between the ideas is an investment that will pay off in the long run
***** Memorizing versus remembering
Those are two different concepts. memorization is the ability to pack some information and place it in your long-term memory. On the other hand, remembering is triggered by pulling the correct ropes (neurons?) in our brains that will recall something. Memorization is useless if we can't recall that information later (this how students usually prepare for exams, they memorize the information, but shortly after they cannot recall it, because this information was not linked properly). Writing and linking notes can help a lot with remembering.
*** Neovim
**** init.lua aliases in neovim
#+begin_src lua
local cmd = vim.cmd  -- to execute Vim commands e.g. cmd('pwd')
local fn = vim.fn    -- to call Vim functions e.g. fn.bufnr()
local g = vim.g      -- a table to access global variables
local opt = vim.opt  -- to set options
#+end_src
**** Luasnippets
For more extensive documentation always use internal vim help ~:h luasnip.txt~
***** Setting up

For default config values, see [[https://github.com/L3MON4D3/LuaSnip/blob/69cb81cf7490666890545fef905d31a414edc15b/lua/luasnip/config.lua#L82-L104][this]]

#+begin_src lua
local ls = require'luasnip'

ls.config.set_config {
    history = true,

    -- this is handy to see all values update at one if used in many places
    updateevents = "TextChanged,TextChangedI",

    -- Those are the globals that will be present in each file
    -- so you don't need to re-define then each time
    snip_env = {
        ls = require'luasnip',
        parse = ls.parser.parse_snippet,
        fmt = require('luasnip.extras.fmt').fmt,
        rep = require('luasnip.extras').rep,
        s = ls.snippet,
        t = ls.text_node,
        i = ls.insert_node,
        f = ls.function_node,
        c = ls.choice_node,
    }
}

-- cleanup the snippets before reloading, this is actually needed for the contents to change
ls.cleanup()
#+end_src

***** Loading files
In order to load snippets from folder, add following

#+begin_src lua
-- to load snippets from lua files
require('luasnip.loaders.from_lua').lazy_load({ paths = "./luasnippets" })
-- to load vscode like snippets
require('luasnip.loaders.from_vscode').lazy_load({ paths = "./snippets" })
#+end_src

***** Lua snippets

Snippets stored in lua files can be more powerful, although less portable. To start with them, create a directory (ex: ~luasnippets~) where all snippets will be stored

Snippets are stored based on ~filetype~. For example, for snippets available for all files, create a file ~luasnippets/all.lua~. (See ~:set filetype~) This file needs to return a list of 2 values, snippets and autosnippets (which may be null)

Example (notice we didn't declare any local variables, because we used snip\_env setup above):
#+begin_src lua
local snippets = {
    s('state', fmt("const [{}, set{}] = React.useState({});{}", {
        i(1, "state"),
        f(function (args)
            return (args[1][1]:gsub("^%l", string.upper))
        end, {1}),
        i(2, "value"),
        i(0)
    }))
}

local autosnippets = {}

return snippets, autosnippets
#+end_src

***** Keymaps
In order to navigate better, you can set following keymaps:

#+begin_src lua
local ls = require('luasnip')
-- Luasnip jump forward or expand
vim.keymap.set({'i', 's'}, "<C-k>", function()
    if (ls.expand_or_jumpable()) then
        ls.expand_or_jump()
    end
end, {silent = true})

-- Luasnip jump backward
vim.keymap.set({'i', 's'}, "<C-j>", function()
    if (ls.jumpable(-1)) then
        ls.jump(-1)
    end
end, {silent = true})

vim.keymap.set({'i', 's'}, "<C-l>", function()
    if (ls.choice_active()) then
        ls.change_choice(1)
    end
end, {silent = true})

-- reload snippets after change was done
vim.keymap.set("n", "<leader><leader>s", "<cmd>source " .. vim.fn.stdpath('config') .. "/lua/snippets-setup.lua<cr>", { silent = true })

-- Edit snippets for current filetype
vim.keymap.set("n", "<leader><leader>se", function() require("luasnip.loaders").edit_snippet_files() end, { silent = true })
#+end_src
***** Extending filetypes
#+begin_src lua
-- when in typescript file, search ONLY typescript and typescriptreact snippets
ls.filetype_set("typescript", { "typescript", "typescriptreact" })

-- when in typescript files, ALSO search typescriptreact
-- WARNING: if this code is rerun every time setup is reloaded, you will see
-- duplicate snippets
ls.filetype_extend("typescript", { "typescriptreact" })
#+end_src
*** Making plans for the future
When you plan something for the future, you cannot know if it will make you happy. (you cannot psychologically know it)

Moral of the story: living in the moment is not just a lofty idea from lifestyle books, it's the only way of living your brain can comprehend)
** Algorithms
Here i will document my solutions to various leetcode questions. I will first attempt to solve them in Python or Javascript

The attempt is to do an explanation of all the questions from this [[https://docs.google.com/spreadsheets/d/1sfaK42jUUNIz9_jsQViWCMR5B2_cos_KD31bKI-5bEg/edit#gid=0][list]]
*** Best time to buy
#+begin_example
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
#+end_example

**** Solution

Solution to this problem is of complexity ~O(n)~. Also called sliding-window technique The idea is to have two pointers. One pointing at the current lowest price, and the other at the current examined price. Also, we want to keep track of the maximum profit made during the loop. So, while we move through the list, we should keep track of 3 things:

-   the minimum price that we encountered so far
-   The maximum profit we could get
-   the current price we're at

This problem can be also solved using [[https://www.geeksforgeeks.org/largest-sum-contiguous-subarray][Kodane's algorithm]] also known as ~largest sum of contiguous subarray~.
*** Binary search
Binary search is performed on sorted collections and has a complexity of O(log n). It is part of Divide and Conquer algorithms and the key target in each step is to make the solution domain smaller, by eliminating portions that don't satisfy the requirements.
*** Binary search in a rotated sorted array :ATTACH:
:PROPERTIES:
:ID:       55e25b1a-4033-42df-943b-ae903ee65f0c
:END:
Source: [[https://leetcode.com/problems/search-in-rotated-sorted-array/][https://leetcode.com/problems/search-in-rotated-sorted-array/]]

#+begin_example
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.
#+end_example

**** Solution

Again, we see the array is sorted and that we need to solve the problem in `O(log n)` time. This almost always means binary-search, so we need to have a left, right, and middle pointer. The key concept to understand, when we take a mid pointer, which portion is sorted relative to this pointer, left or right?

[[attachment:Solution1.png]]

This is easy to check if we know what is the leftmost value of the array (and we know it). If `left <= mid` then left part is sorted, else the right part is sorted. Now that we know which part is sorted, we can check if our `target` is within that sorted part. If it is, then discard the other portion, and vice versa.

[[attachment:Solution2.png]]

In above example, target was not in our sorted (left) part, so we just discarded it and continue the search in the remaining portion.

#+begin_src python
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid;
           # Is the left part sorted?
            if nums[left] <= nums[mid]:
                # Left part is sorted
                if nums[left] <= target < nums[mid]:
                    # search the left part
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                # Right part is sorted
                if nums[mid] < target <= nums[right]:
                    # search right
                    left = mid + 1
                else:
                    right = mid - 1
        return -1
#+end_src
*** Contains duplicate
Source: [[https://leetcode.com/problems/contains-duplicate]]

#+begin_example
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
#+end_example

**** Solution
There are 2 possible solutions that appear to me as optimal:

1. Sort the array first. It is easy to find out if there are duplicates in a sorted array. The complexity will be then equal to the complexity of sorting. This is a more memory efficient method.
2. Use a hash map to identify if an element was previously found
*** Maximum product subarray
:PROPERTIES:
:SOURCE:   https://leetcode.com/problems/maximum-product-subarray/
:END:

Problem:
#+begin_example
Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product. It is guaranteed that the answer will fit in a 32-bit integer. A subarray is a contiguous subsequence of the array.
#+end_example

**** Solution :ATTACH:
:PROPERTIES:
:ID:       e58a059c-58de-4516-adbf-8bd3edbe0e3a
:END:
This puzzle is easily solved with Dynamic programming What information do we need? When looping through the array, I want to keep track of the maximum product that I encountered so far before.

[[attachment:one.png]]

But there is an issue with the negative numbers. Let's say we have array [-1, -2, 3, -4]. What is the maximum product here.
[[attachment:two.png]]

Solution to this issue is to keep track both of Max and Min of the previous subarray:
[[attachment:three.png]]

With this, only 1 special case remains, it's zero. When we encounter a 0, we want to reset both max and min to 1.
[[attachment:four.png]]

#+begin_src python
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        maxp = minp = nums[0]
        answer = nums[0]
        for num in nums[1:]:
            if num < 0:
                # when we have negative values, signs change
                (maxp, minp) = (minp, maxp)
            maxp = max(num, maxp * num)
            minp = min(num, minp * num)
            answer = max(maxp, answer)
        return answer
#+end_src

**** Thoughts
Dynamic programming uses the concept of memorizing the previous calculations so we don't have to re-compute them again and again. It's actually very similar to Maximum subarray but here we need another variable to keep track of - ~minimum so far~
*** Maximum subarray
:PROPERTIES:
:SOURCE:   https://leetcode.com/problems/maximum-subarray/
:END:
#+begin_example
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.
#+end_example

**** Solution
Solution is based on Kodane's algorithm. (also mentioned Best time to buy) It's a method to find the biggest contiguous positive subarray.

Pseudocode:
#+begin_src python
max_so_far = -infinity
max_result = 0

for each number in array:
    max_so_far = max_so_far + number
    max_result = max(max_result, max_so_far)
    if max_so_far is less than 0: # if sum goes below 0, it's useless for our result, cut it
        max_so_far = 0 # make sure to reset to 0 if sum went negative
#+end_src

Python:
#+begin_src python
class Solution:
    # Using Kodane's algorithm
    def maxSubArray(self, nums: List[int]) -> int:
            max_so_far = -inf
            max_ending_here = 0
            # Loop over elements
            for num in nums:
                    max_ending_here += num
                    max_so_far = max(max_so_far, max_ending_here)
                    max_ending_here = max(0, max_ending_here)
            return max_so_far
#+end_src
*** Minimum in rotated sorted array
:PROPERTIES:
:SOURCE:   https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
:END:
#+begin_example
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.
#+end_example

**** Solution :ATTACH:
:PROPERTIES:
:ID:       4cda5a7b-337d-48ad-8998-ba47618ff86f
:END:
What is the goal? to find the minimum value in a sorted array that might be rotated. (in log n time)

When a sorted array is rotated, what we have as a result is actually 2 sorted arrays. And what we need to find is the leftmost value of the smaller (right) one.

[[attachment:sort1.png]]

But we don't know where left array ends and the right one begins. What we can do, we can start choosing pivots and checking if we are in the first or second array?

[[attachment:sort2.png]]

With this pivot, are we in the first array or the second? we can check this by comparing to the left most value, if it's less or equal to the pivot, then we are in the left (first) array. In this case this is true, and this means we can safely ignore all the elements before the p1ivot and continue searching in the remaining array(s)

[[attachment:sort3.png]]

Notice we still have 2 sorted arrays left
Say we selected a new pivot:

[[attachment:sort4.png]]

Now the situation is different as it's smaller than the leftmost value, meaning we are in the right array. This means all the values after it are only larger and can be ignored.
Now after few iterations we would arrive at this point:

[[attachment:sort5.png]]

If the left value is smaller or equal to the right value, it means the array is already sorted, and what we need to do is just return the leftmost value.

#+begin_src python
class Solution:
    def findMin(self, nums: List[int]) -> int:
        left = 0
        right = len(nums) - 1
        while left < right:
            if nums[left] <= nums[right]:
                # Array from left to right is already sorted, return the leftmost value
                return nums[left]
            pivot = (left + right) // 2
            # Where is the pivot? left or right array?
            if nums[pivot] >= nums[left]:
                # Left, continue searching to the right of the pivot
                left = pivot + 1
            else:
                # Right, continue searching to the left
                right = pivot
        return nums[left]
#+end_src

**** Thoughts
When we have to search something in a sorted or rotated array, first should come to mind Binary search. When thinking of binary search, it's useful to think about which parts of the sequence will be disqualified in this step, in order to make the possible solution list smaller.
** Design Patterns
*** Decorator
[[https://refactoring.guru/design-patterns/decorator][Source - refactoring guru]]
Decorator design pattern is used to enhance an object using `Composition` instead of inheritance, while preserving the same interface

**** Example
Let's say I have a ~DataSource~ class in my library. Users of the library have requested a new feature to be able to encrypt the content of the ~DataSource~, and other users requested compression of the ~DataSource~. Some of them would like to have both. In this case I can just implement two decorators (as seen in  [[id:d0264d8b-852b-40be-8c48-c708a4bc075b][Pseudo code]] section). Then, client can use either one of those, or he can combine them and have something like this ~(((FileDataSource) EncryptionDecorator) CompressionDecorator)~

**** Pseudo code :ATTACH:
:PROPERTIES:
:ID:       d0264d8b-852b-40be-8c48-c708a4bc075b
:END:
[[attachment:pseudo.png]]
*** Singleton
:PROPERTIES:
:ID:       92e4226f-e8ac-4104-a74f-eb953e224abb
:END:
This is a very simple pattern. It ensures that there will be only one instance of a class at the same time in the application. This if often needed when objects with state need to be passed around the application.

In [[id:6c94391a-b52c-4308-93bc-d770b29857fc][Javascript]], a singleton is very easily implemented, just by exporting a concrete instance of an object:

#+begin_src js
class Database {
    constructor(source) {
        this.source = source;
    }

    getSource() {
        return this.source;
    }
}

export default new Database("data.sqlite");
#+end_src

**** Solved problem
Singleton is a videly used pattern. And it solves well the problem of passing a stateful object around in application. It could be used in applications where there are not so many dependencies, or we know those dependencies will not change (we never know though).
**** Caveats
You should never (at least in javascript), assume that the singleton instance is really the only one instance used in the application. Unless using a `global.MyInstance` variable, there is always a possibility that two packages will use different versions of some singleton dependency, and will download two versions in their `node_modules`. But you probably never need a really unique singleton in the whole application.
*** Dependency injection :ATTACH:
:PROPERTIES:
:ID:       1706fad8-b073-4c65-9918-f63b641013d8
:END:
Also called just DI. It's a pattern, same as [[id:92e4226f-e8ac-4104-a74f-eb953e224abb][Singleton]] pattern that facilitates passing dependencies. Unlike singleton, where the dependency is created outside of your program main logic, in DI, there is such a thing called injector, which constructs the dependencies, and provides them to the parts of the application that require them.

[[file:~/Pictures/Screenshots/Screenshot from 2022-07-24 15-42-58.png]]

**** Solved problem
The DI solves the same problems as [[id:92e4226f-e8ac-4104-a74f-eb953e224abb][Singleton]], plus having less coupling between parts of the application. In fact, dependencies are quite interchangeable until they all implement the same interface.
**** Caveats
Injecting dependency manually can be cumbersome, and in large applications there might be a need to insert a lot of services. To help with those, check out Inversion of control and Dependency injection container.
*** Pattern is just a pointer, not a solution
Accoring to the book "Pattern of enterprise application architecture", patterns are 'half-baked'.

Patterns cannot be applied blindly to your particular cases, as they always need to be adapted to a concrete situation. This is because the pattern is describing only **the core** solution (or how one should think about the solution). Implementing this solution is a task that should be done.

#+begin_quote
Every pattern is incomplete, and you have the responsibility, and the fun, to adapt it to your project

//"Patterns of enterprise applications architecture"//
#+end_quote
** Data structures
*** Piece table
Piece table is a data structure convenient for implementing text editors or similar structures.

Piece table is an append only data structure, meaning it doesn't delete anything from content that was ever inserted.

It consists of 3 pieces:
- original buffer (readonly)
- add buffer (where we append what user has inserted)
- array of pieces, that keeps track of which pieces from which buffers are currently shown

#+begin_src json
{
    "original": "the quick brown fox\njumped over the lazy dog",
    "add": "",
    "pieces": [Piece(start=0, length=44, source="original")],
}
#+end_src

For example we have the text ~Hello world~. Our piece table would look like this:
#+begin_src json
{
    "original": "Hello world",
    "add": "",
    "pieces": [Piece(start=0, length=11, source="original")],
}
#+end_src

Say we modify the string by adding a ~!~ at the end, so now it's ~Hello world!~
#+begin_src json
{
    "original": "Hello world",
    "add": "!",
    "pieces": [
        Piece(start=0, length=11, source="original"),
        Piece(start=0, length=1, source="add"),
    ],
}
#+end_src

Notice what we did: we appended ~!~ to the add buffer, and added another piece to the array, that points to this character.

What if we add something to the middle of the text? Say we modified the original string like this ~Hello f***ing world~ where we added the string ~f***ing~ (notice the space at the beginning)

#+begin_src json
{
    "original": "Hello world",
    "add": " f***ing",
    "pieces": [
        Piece(start=0, length=5, source="original"),
        Piece(start=5, length=8, source="add"),
        Piece(start=5, length=6, source="original")
    ],
}
#+end_src

Notice that now we split the original piece into 2 parts and add the new content in the middle.
Same thing happens with deletion, we only need to adjust the pieces to point to the content that should be visible.
** Chrome extension development
*** Getting started
1. Open link in chrome `chrome://extensions`
2. Click ~Developer mode~
3. Click ~Load unpacked~ and select the project folder
*** Creating a manifest
:PROPERTIES:
:ID:       971eea90-a5a4-45c6-b8c6-42b6d54a4150
:END:
Create a manifest in the root of the project
#+begin_src text
{
  "name": "Getting Started Example",
  "description": "Build an Extension!",
  "version": "1.0",
  "manifest_version": 3,
    // File to run in background
    "background": {
    "service_worker": "background.js"
  },
  // Static content scripts
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["./scripts/main.js"],
            "run_at": "document_idle"
    }
  ],
    // Add permissions that the extension will need
    "permissions": ["storage"],
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "folder/icon.png",
      "32": "folder/icon.png",
      "48": "folder/icon.png",
      "128": "folder/icon.png"
    }
  },
  "icons": {
    "16": "./images/get_started16.png",
    "32": "./images/get_started32.png",
    "48": "./images/get_started48.png",
    "128": "./images/get_started128.png"
  }
}
#+end_src
*** Add icons to chrome extension
-   Add images of different sizes into the project folder. (16, 32, 48, 128).
-   Add `default_icon` property to [[id:971eea90-a5a4-45c6-b8c6-42b6d54a4150][manifest]]
*** Add options page in chrome extension
-   Create a html file that will be shown on options (example `options.html`)
-   Add `options_page` property to the [[id:971eea90-a5a4-45c6-b8c6-42b6d54a4150][manifest]]
-   Additionally, add respective javascript files
*** Enable typing
To enable types, create a file jsconfig.json in the root directory, and add:

#+begin_src js
{
    "typeAcquisition": {
        "include": ["chrome"]
    }
}
#+end_src

For this, your directory will need to be initialized as npm package.
*** Service worker
A service worker in chrome extension is registered in the [[id:971eea90-a5a4-45c6-b8c6-42b6d54a4150][manifest]] using property ~background~ property.
Service worker is not meant to modify the DOM, in fact it doesn't have a ~window~ in it's environment. It is meant to listen to events instead.

**** What are Service workers
Service workers are a special kind of [[https://developer.mozilla.org/en-US/docs/Web/API/Worker][web-workers]]. Service workers are Javascript scripts that run in the browser's background and are not linked to a particular web page. Often usage of a service worker involves a cache and enabling offline functionality, since service workers can intercept network request and interrupt/modify them. Service workers can't access the DOM, since they are not linked to a particular web page or tab, but they can communicate with the page by sending messages. If service workers need access to a persistent storage, they can use Indexdb

**** Life cycle
***** Why life cycle is important
Life cycle is important especially in situations when you want to update the service worker with a new version.

1.  Provide seamless offline experience
2.  Make sure a new version of the service worker can download itself and install itself without interrupting the existing one
3.  Make sure that each page which is in scope is controlled by the same service worker
4.  Make sure no two different versions of service workers are running in the same session

***** Download
Download phase happens the first time when you call ~navigator.serviceWorker.register~. It will try to download all scripts and static files. If any of those fail, the service worker will not be installed and will retry it next time.

***** Install
After a successful download, service worker get's an `install` event. Install event will be called only once for each service worker, and this is the place to setup all caches and dependencies. If `install` fails, it will never be able to control the clients (see [[https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#install]])

***** Activate

~activate~ is the state when service worker becomes functional. But it will not control the client the first time it activated after ~register~, because initially page loaded without the service worker being installed. To start controlling, page needs to be loaded with service worker already being installed (in other words, refresh the page). (You could start controlling the client without refreshing the page, see [[https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#clientsclaim]]

***** Life cycle during update
When updating a service worker the life cycle is similar, but with small nuances

***** Download the updated version
The new version will be downloaded if at least a byte of a difference in the service worker or it's modules is spotted.

***** Installing the update
Then the service worker is installed (the old version is still running). After installation the updated service worker is put in a `waiting` state. This means that old service worker is still running, and will be running until there is at least one page controller by it opened. This should prevent 2 different service workers controlling the same page. (you can [skip](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#skip_the_waiting_phase) the waiting phase)

***** Activating the update
One you close all your tabs and open it again, the new service worker will be ~activated~.

==Important: event handlers must be registered synchronously==
If you register event handlers in a async function you might miss the events, because browser will terminate the service worker when it's not needed and will spawn it again when it's required.

***** Storage
Because browser will terminate the Service worker when necessary, you cannot rely on in-memory storage like variables, as they might be reset. Instead, use [[https://developer.chrome.com/docs/extensions/reference/storage/]]

***** Example
Example of an event you might want is `chrome.runtime.onInstalled`, which fill fire once when your application is installed. It might be used to setup the environment and do more setup.
*** Content scripts
Content scripts contain code that is meant to be inserted to the page's DOM and modify content there.
**** Static injection
Static script and css injection is done via manifest file. Using `content_scripts` property (see [[id:971eea90-a5a4-45c6-b8c6-42b6d54a4150][Creating a manifest]])
**** Dynamic injection
Dynamic script injection can be done at runtime in response to events. It's done using ~chrome.scripting.executeScript~ (see [[https://developer.chrome.com/docs/extensions/reference/scripting/#method-executeScript][documentation]])
*** Creating UI for the extension
Create a ~.html~ file with the ui
Add a action property to the manifest. See [[id:971eea90-a5a4-45c6-b8c6-42b6d54a4150][manifest]]
** Powershell
*** Create ssh key in windows and add it to github
:PROPERTIES:
:ID:       e1d81e89-b499-42a8-a2d2-368d0a23e8d5
:END:
1. Create an Ssh key with Powershell ~ssh-keygen -C andrei.dimitrascu@gmail.com~
2. run in ~Powershell Get-Content -Path $HOME\.ssh\id_rsa.pub | Set-Clipboard~ to save your public key to the clipboard
3. Go to https://github.com/settings/ssh/new and add the content of your public key file
4. Restart all terminal sessions, if =HOME= Environmental variable is set
   correctly Git should start working with the new Ssh key (it will look for
   =%HOME%/.ssh/id_rsa= file)

*** Create link in powershell
:PROPERTIES:
:ID:       3c5794b4-a7ea-4011-af27-895d646f16e3
:END:
There are 2 types of files in windows, soft and hard.
- =Soft links=: just like regular links, there is an arrow symbol next to the icon.
- =Hard links=: Make it appear like the file is really on the location,
  although it's a link.

#+begin_src sh
# Create soft link
# Path can be either a file or a folder

> New-Item -ItemType SymbolicLink -Path "PathWhereLinkShouldBeCreated" -Target "Target"

# Create hard link for a file

> New-Item -ItemType HardLink -Path "PathWhereLinkShouldBeCreated" -Target "Target"

# Create hard link for a folder (junction point)

> New-Item -ItemType Junction -Path "PathWhereLinkShouldBeCreated" -Target "Target"
#+end_src
*** Measure command execution time in powershell
#+begin_src powershell
Measure-Command { Invoke-Expression "cargo run" | Out-Default }
#+end_src
*** Powershell add command line arguments
#+begin_src powershell
[CmdletBinding()]
param (
    [Parameter()]
    [string]
    $paths,
    [Parameter()]
    [string]
    $destination
)

# Logic
Write-Output "$paths and $destination"
#+end_src
*** Powershell check if file exists
:PROPERTIES:
:ID:       753964a2-937e-4166-b82a-e8c4e1ea60e7
:END:
#+begin_src powershell
if (-Not (Test-Path -Path $paths)) {
   # Logic
}
#+end_src
*** Dotnet test - run failed tests only with powershell
Use following powershell script to extract the filter for our command (replace the name of =.trx= file):

#+begin_src sh
$filter = (Select-String -Pattern 'UnitTestResult.*testName=\"(\w+)\".*outcome="Failed"' -Path .\TestResults\All.trx | ForEach-Object { "DisplayName=$($_.Matches.Groups[1])" }) -join "|"

# Then run dotnet command
dotnet test --filter $filter --logger "trx;logfilename=All3105.trx" -r .\TestResults\
#+end_src
*** Measure command execution time
#+begin_src sh
Measure-Command { Invoke-Expression "cargo run" | Out-Default }
#+end_src
*** Add command line arguments
Powershell add command line arguments

#+begin_src sh
[CmdletBinding()]
param (
    [Parameter()]
    [string]
    $paths,
    [Parameter()]
    [string]
    $destination
)

# Logic
Write-Output "$paths and $destination"
#+end_src
*** Check if file exists
Powershell check if file or folder exists:

#+begin_src sh
if (-Not (Test-Path -Path $paths)) {
# Logic
}
#+end_src
*** Create array
:PROPERTIES:
:SOURCE:   https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-7.2
:END:
#+begin_src sh
$data = @('Zero','One','Two','Three')
#+end_src
*** Split long command over multiple lines
:PROPERTIES:
:SOURCE:   https://stackoverflow.com/questions/2608144/how-to-split-long-commands-over-multiple-lines-in-powershell
:END:
In order to split a command, use backticks  ~`~:

#+begin_src sh
&"C:\Program Files\IIS\Microsoft Web Deploy\msdeploy.exe" `
-verb:sync `
-source:contentPath="c:\workspace\xxx\master\Build\_PublishedWebsites\xxx.Web" `
-dest:contentPath="c:\websites\xxx\wwwroot,computerName=192.168.1.1,username=administrator,password=xxx"
#+end_src
*** Throw exception
:PROPERTIES:
:SOURCE:   https://docs.microsoft.com/en-us/powershell/scripting/learn/deep-dives/everything-about-exceptions?view=powershell-7.2
:END:
#+begin_src sh
function Start-Something
{
    throw "Bad thing happened"
}
#+end_src
*** Try/catch
:PROPERTIES:
:SOURCE:   https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_try_catch_finally?view=powershell-7.2
:END:
#+begin_src sh
try {
   $wc = new-object System.Net.WebClient
   $wc.DownloadFile("http://www.contoso.com/MyDoc.doc","c:\temp\MyDoc.doc")
}
catch [System.Net.WebException],[System.IO.IOException] {
    "Unable to download MyDoc.doc from http://www.contoso.com."
}
catch {
    "An error occurred that could not be resolved."
}
#+end_src
*** Validate xml schema
Following script can be used to validate an XML Schema in Powershell:

#+begin_src sh
function Test-XmlSchema
{
    param
    (
        [Parameter(Mandatory = $true)]
        [ValidateScript({Test-Path $_})]
        [String]
        $XmlPath,

        [Parameter(Mandatory = $true)]
        [ValidateScript({Test-Path $_})]
        [String]
        $SchemaPath
    )

    $schemas = New-Object System.Xml.Schema.XmlSchemaSet
       $schemas.CompilationSettings.EnableUpaCheck = $false
       $schema = ReadSchema $SchemaPath
       [void]($schemas.Add($schema))
       $schemas.Compile()

       try
    {
        [xml]$xmlData = Get-Content $XmlPath
              $xmlData.Schemas = $schemas

        #Validate the schema. This will fail if is invalid schema
              $xmlData.Validate($null)
              return $true
       }
    catch [System.Xml.Schema.XmlSchemaValidationException]
    {
              return $false
       }
}

Function ReadSchema
{
       param($SchemaPath)
       try
    {
              $schemaItem = Get-Item $SchemaPath
              $stream = $schemaItem.OpenRead()
              $schema = [Xml.Schema.XmlSchema]::Read($stream, $null)
              return $schema
       }
       catch
    {
              throw
       }
       finally
    {
              if($stream)
        {
                     $stream.Close()
              }
       }
}

Export-ModuleMember -Function Test-XmlSchema
#+end_src
*** Replace values in string
:PROPERTIES:
:SOURCE:   https://adamtheautomator.com/powershell-replace/#:~:text=You%20don't%20need%20to,using%20a%20variable%20for%20convenience.
:END:
To replace a string:
#+begin_src sh
"String From".Replace("From", "T") --> "String To"
#+end_src

To replace a regex:
#+begin_src sh
"String From1" -replace "From\d", "To"
#+end_src
** Linux :linux:
*** Create symlink
Links in Linux are created using the ~ln~ command.

#+begin_src sh
ln -sf ~/dotfiles/nvim ~/.config/nvim
#+end_src

For windows, see [[id:3c5794b4-a7ea-4011-af27-895d646f16e3][Create link in powershell]]
*** Edit cron tasks for other user
In order to edit cron tasks in Linux:
#+begin_src sh
crontab -e
#+end_src

To edit tasks as other user:
#+begin_src sh
crontab -e -u username
#+end_src

To see a list of usernames see [[id:b787a88d-b5f3-41ad-84ab-79fb31bb981e][List all users in Linux]]
*** List all users in Linux
:PROPERTIES:
:ID:       b787a88d-b5f3-41ad-84ab-79fb31bb981e
:END:
To list all users in Linux, use ~cat /etc/passwd~
To list all groups currently in Linux, use ~cat /etc/group~
*** Extract files from archive in Linux
~tar xvzf file.tar.gz~

Where:
1. ~x~ stands for ~extract~
2. ~v~ stands for ~verbose~
3. ~z~ stands for ~gzip~
4. ~f~ stands for ~file~
*** Grep exclude directory
In order to exlude directories while ~grep'ing~:

#+begin_src sh
grep -r --exclude-dir="node_modules" "pattern"
     |                   |
`recursive`   `exclude node_modules`
#+end_src
*** How to open file manager from terminal
1. Navigate to the folder you need
2. type ~xdg-open .~ to open current folder or ~xdg-open filename~ to open file
It's the same as ~start~ command in Windows
*** List file sizes
To list file sizes in Linux, use ~-l~ and ~-h~ flags of ~ls~ command

//Example: `ls -lh .` will show something like://
#+begin_example
total 3.6M
drwxr-xr-x 4 andrei andrei 4.0K Jan  9 09:27 build
drwxr-xr-x 2 andrei andrei 4.0K Jan  9 09:27 deps
drwxr-xr-x 2 andrei andrei 4.0K Jan  9 09:27 examples
-rwxr-xr-x 2 andrei andrei 3.6M Jan  9 09:27 guessing_game
-rw-r--r-- 1 andrei andrei  130 Jan  9 09:27 guessing_game.d
drwxr-xr-x 2 andrei andrei 4.0K Jan  9 09:27 incremental
#+end_example
** Databases
*** ACID
ACID stands for atomicity, consistency, isolation, durability.
In short it's the ability of the database to handle complex operations as a single transaction, and guarantee data remains valid even after unforeseen issues like outages or other errors.
*** Postgres SQL
**** Postgres is a Open source object relational database
1. Documentation – https://www.postgresql.org/docs/
2. Other online resources – https://www.postgresql.org/docs/online-resources/
3. Exercises – https://pgexercises.com/gettingstarted.html

**** To revisit
- Creating views – https://www.postgresql.org/docs/current/tutorial-views.html
- Window functions – https://www.postgresql.org/docs/current/tutorial-window.html
- Inheritance – https://www.postgresql.org/docs/current/tutorial-inheritance.html
**** Alter user role in Postgres
***** Change role
Alter the role afterwards - ~ALTER ROLE rast999 WITH CREATEDB CREATEROLE LOGIN REPLICATION;~
***** Set a new password
Setting new password is the same ~ALTER ROLE sample WITH PASSWORD 'newpassword';~
**** Create postgres database
To create a new database:
#+begin_src sh
createdb mydb

# if you want to create a database with the current user name, just use
createdb

# to delete a database
dropdb mydb
#+end_src

It might be that you will get this error - ~createdb: error: connection to server on socket "/var/run/postgresql/.s.PGSQL.5432" failed: FATAL: role "rast999" does not exist~. This means that postgres was installed under role ~postgres~ and before logging in you will need to create a new role for your normal user (ex. for ~rast999~). See [[id:a3259d0d-56dd-4eef-8d1c-978efd931b66][Create postgres role]].
**** Check if Postgres service is running
To check if the service is running on Linux:
~sudo service postgresql status~

To start the service if it's not running:
~sudo service postgresql start~
**** Combine queries with union operator
Union will combines different queries. Columns in all queries must have the same type. ~UNION~ will remove all duplicates from resulting table. There is also ~UNION ALL~ that will leave the duplicates.

#+begin_src sql
SELECT surname
  FROM cd.members
    UNION  -- couls also use UNION ALL
SELECT name
  FROM cd.facilities;
#+end_src
**** List users in postgres
:PROPERTIES:
:ID:       0ef0a298-1609-425d-9547-93ffb7e70649
:END:
To list the users, run ~SELECT rolname FROM pg_roles;~ (note the ~;~ at the end). Or, you can from run ~\du~ meta-command Sample output:

| Role name | Attributes                                                 | Member of |
|-----------+------------------------------------------------------------+-----------|
| postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}        |
| rast999   |                                                            | {}        |
**** Create postgres role
:PROPERTIES:
:ID:       a3259d0d-56dd-4eef-8d1c-978efd931b66
:END:
In a fresh postgres installation, you cannot just connect to database from your normal user (ex. rast999). Instead, you will need first to create a role (aka user) in postgres for it.

To do this:
- login as user ~postgres~: ~sudo su postgres~
- run ~psql~, then ~CREATE ROLE name~ or just ~createuser name~ from command line

Note: This will create a simple role without any privileges.

To grant role privileges you can:
Specify them at creation time - ~CREATE ROLE rast999 CREATEDB CREATEROLE LOGIN REPLICATION;~
In order to check which users are currently created, see [[id:0ef0a298-1609-425d-9547-93ffb7e70649][List users in postgres]]
**** Create table
#+begin_src sql
CREATE TABLE table_name (
    name varchar(80),
    area double,
);
#+end_src
**** Delete table
#+begin_src sql
DROP TABLE table_name;
#+end_src
**** Insert data into table
You can insert values into postgresql via SQL command:

#+begin_src sql
INSERT INTO cities VALUES ('San Francisco', '(-194.0, 53.0)');

-- or

INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)
    VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');
#+end_src

Or, you can insert directly from a text, or to a text file using the `\copy` command:
#+begin_src sql
-- This will copy data from text file to the table
-- Fields are tab-separated
\copy table_name FROM '/home/user/Documents/data.txt';

-- This will copy data from table to a text file
\copy table_name TO '/home/user/Documents/data.txt';
#+end_src
**** List tables
To list all tables in Postgres, use ~\dt~ or ~\dtables~

example output:
#+begin_example
                 List of relations
 Schema |          Name          | Type  |  Owner
--------+------------------------+-------+---------
 public | categories             | table | KREAKVA
 public | customer_customer_demo | table | KREAKVA
 public | customer_demographics  | table | KREAKVA
 public | customers              | table | KREAKVA
 public | employee_territories   | table | KREAKVA
 public | employees              | table | KREAKVA
 public | monthly_savings        | table | KREAKVA
 public | order_details          | table | KREAKVA
 public | orders                 | table | KREAKVA
 public | products               | table | KREAKVA
 public | region                 | table | KREAKVA
 public | shippers               | table | KREAKVA
 public | suppliers              | table | KREAKVA
 public | territories            | table | KREAKVA
 public | us_states              | table | KREAKVA
(15 rows)
#+end_example
**** Joins
- **INNER JOIN**, or just **JOIN**. Matches all rows ON a certain condition and keeps only the ones where this condition is true.

#+begin_example
mydb=> SELECT name, surname, job FROM people JOIN jobs ON name = person_name;

  name  |  surname   |    job
--------+------------+------------
 Jane   | Doe        | Accountant
 John   | Doe        | Accountant
 Bill   | Gates      | CEO
 Artiom | Fragkoulis | Artist
(4 rows)
#+end_example

- **LEFT OUTER JOIN**. This translates to, get each row from left table at least once, and join it with the table on the right. If nothing to join, leave empty (null). Or, get all data from left table, and matching data from right table. Same with **RIGHT OUTER JOIN** but inverse. There is also **FULL OUTER JOIN**, which is the combination of two (get all data from both tables, where there is no link, leave blank/null)

#+begin_example
mydb=> SELECT name, surname, job FROM people LEFT OUTER JOIN jobs ON name = person_name;

  name  |  surname   |    job
--------+------------+------------
 Jane   | Doe        | Accountant
 John   | Doe        | Accountant
 Bill   | Gates      | CEO
 Artiom | Fragkoulis | Artist
 Jeff   | Bezos      |                <-- Here there is not data to link
 Jeff   |            |                <-- Here there is not data to link
(6 rows)
#+end_example

- **SELF JOIN**. Self join is nothing more than a simple join, but joining a table with itself. This is done by using table aliases.

#+begin_example
mydb=> SELECT p1.name, p1.age, p2.name, p2.age FROM people p1 JOIN people p2 ON p1.age > p2.
age;
  name  | age |  name  | age
--------+-----+--------+-----
 Jane   |  24 | John   |  19
 Bill   |  70 | Jane   |  24
 Bill   |  70 | John   |  19
 Bill   |  70 | Jeff   |  44
 Bill   |  70 | Jeff   |  51
 Bill   |  70 | Artiom |  30
 Jeff   |  44 | Jane   |  24
 Jeff   |  44 | John   |  19
 Jeff   |  44 | Artiom |  30
 Jeff   |  51 | Jane   |  24
 Jeff   |  51 | John   |  19
 Jeff   |  51 | Jeff   |  44
 Jeff   |  51 | Artiom |  30
 Artiom |  30 | Jane   |  24
 Artiom |  30 | John   |  19
(15 rows)
#+end_example
*** T-SQL
:PROPERTIES:
:ID:       a05ed9e6-09fe-49fd-aa4f-8e1db8d1976c
:END:
**** Documentation resources
Some documentation resources and courses on T-SQL (and SQL in general):
1. Official Microsoft documentation - https://docs.microsoft.com/sql
2. Microsoft reference on T-SQL specifically - https://docs.microsoft.com/en-us/sql/t-sql
**** Category of statements in T-SQL
There are 3 base categories of statements in T-SQL:

- DML (Data Manipulation Language) - statements used to insert data (INSERT, UPDATE, DELETE) or query information from database (SELECT)
- DDL (Data Definition Language) - statments used to define the database schema and create tables (CREATE, ALTER, DROP)
- DCL (Data Control Language) - statements used to manage users and their permissions (GRANT, REVOKE, DENY)
**** 3VL or Ternary logic
:PROPERTIES:
:ID:       83fba0f7-6614-4212-8954-ecfe58d0f699
:END:
Ternary logic in T-SQL represents predicates which may have 3 values:

1. TRUE
2. FALSE
3. UNKNOWN :: *UNKNOWN value is used when one of the operands is NULL*

Rules of ternary logic:

Any comparison of 2 =UNKNOWNs= is also =UNKNWON=
Comparison of any =KNOWN= value to =UNKNOWN= value is also =UNKNOWN=
A State predicate (a strict Yes or No question), always evaluates to =TRUE= or =FALSE=
**** Aggregate functions
Aggregate functions are the ones that take multiple values, and return a single value. Examples of aggregate functions:

1. MAX
2. MIN
3. AVG
4. COUNT

Source: https://docs.microsoft.com/en-us/sql/t-sql/functions/aggregate-functions-transact-sql?view=sql-server-ver16
**** CASE operator
#+begin_src sql
SELECT name,
    CASE WHEN (monthlymaintenance > 100) THEN
      'expensive'
    ELSE
      'cheap'
    END AS cost
    FROM cd.facilities;
#+end_src

Will return something like this:

|--------+-----------|
| name   | cost      |
|--------+-----------|
| Court1 | cheap     |
| Court2 | expensive |
|--------+-----------|
**** Checking for NULL
Checking for NULL in [[id:a05ed9e6-09fe-49fd-aa4f-8e1db8d1976c][T-SQL]] is done like below:

#+begin_src sql
-- Check if valus is null
X IS NULL

-- Check if value is not null
X IS NOT NULL

-- Example
SELECT Customer AS Name
    FROM Customers
    WHERE Country IS NOT NULL;
#+end_src

It is not a comparison predicate, it's a state predicate. It can only evaluate to ~TRUE~ or ~FALSE~ (see [[id:83fba0f7-6614-4212-8954-ecfe58d0f699][3VL or Ternary logic]])
**** Comments
For comments in T-SQL, use:

#+begin_src sql
-- This is a single line comment
/ this is a multiline comment /
#+end_src
**** Logical operators
-   ~ALL~ - ~X > ALL(A, B, C)~
-   ~ANY|SOME~ - ~X > ANY|SOME(A, B, C)~
-   ~IN~ - ~X IN (A, B, C)~
-   ~NOT IN~ - ~X NOT IN (A, B, C)~
-   ~BETWEEN~ - ~X BETWEEN A AND B~
-   ~LIKE~ - ~X LIKE <pattern>~
-   ~IS [NOT] NULL~ - ~X IS [NOT] NULL~ <– State predicate (always evaluates to TRUE or FALSE)
**** Order of execution
SQL server executes the queries in following order:

1.  FROM
2.  WHERE
3.  GROUP BY
4.  HAVING
5.  SELECT
6.  ORDER BY
** Elisp (emacs-lisp)
*** Resources
Resource list from the doomer himself: [[https://discourse.doomemacs.org/t/other-learning-resources/48][https://discourse.doomemacs.org/t/other-learning-resources/48]]
*** Hello world
#+begin_src elisp
  (print "Hello world")
#+end_src
*** Working with buffers
There are several function for working with buffers

#+begin_src elisp :eval no
  ;; returns the buffer name
  (buffer-name)

  ;; returns the file name associated with the buffer
  (buffer-file-name)

  ;; returns the current buffer object
  (current-buffer)

  ;; returns the buffer object used before current-buffer
  (other-buffer)

  ;; Get buffer by name
  (get-buffer "*scratch*")

  ;; Switching to another buffer
  ;; Same as when pressing C-x b <buffer-name>
  (switch-to-buffer (other-buffer))

  ;; Set current buffer to...
  (set-buffer (other-buffer))
#+end_src

#+RESULTS:
: #<buffer init.el>
**** Buffer size and cursor

Determining the buffer size and the position of the cursor

#+begin_src elisp
  ;; Getting buffer size
  (buffer-size (current-buffer))

  ;; Getting the position of the cursor in the current buffer
  (point)

  ;; Getting the minimum position of the pointer (always 1?)
  (point-min)

  ;; Getting the max possible position of the pointer (always = buffer-size + 1?)
  (point-max)
#+end_src

#+RESULTS:
: 9074
*** Defining functions in emacs lisp
Function definition parts:
#+begin_example
(defun FUNCTION-NAME (ARGUMENTS...)
  "OPTIONAL-DOCUMENTATION..."
  (interactive ARGUMENT-PASSING-INFO)     ; optional
  BODY...)
#+end_example
*** Interactive functions in emacs lisp
An interactive function is a simple function with ~(interactive)~ specified in
it's definition

#+begin_src elisp
  (defun multiply-by-seven (number)
    "This function simply multiplies a number by 7"
    (interactive "p")
    (message "Result is %d" (* number 7)))
#+end_src

#+RESULTS:
: multiply-by-seven
**** Interactive arguments
There are more characters that can be passed to ~interactive~ as arguments.
See info:elisp#Interactive Codes
*** Predicates and boolean tests in elisp
:PROPERTIES:
:ID:       1d004eef-7276-403b-9ac8-d311d619f3e4
:END:
Any predicates in elisp return either ~nil~ or anything else.
In fact, =false= value is just ~nil~. Anything else is interpreted as =true=.
*** Elisp ~if~ keyword :ATTACH:
:PROPERTIES:
:ID:       4eae3b16-b29e-46f2-9a54-af8448d62550
:END:
The if keyword can be used as follows in elisp:
For details on how =test= part decides where to go, see [[id:1d004eef-7276-403b-9ac8-d311d619f3e4][Predicates and boolean tests in elisp]]

#+begin_src elisp
  (defun test-point ()
    "Showcasing 'if' usage"
    (let ((pos (point)))
            (if (> pos 10)
                (message "Point is at position %d" pos
              (message "Point position too low (%d)" pos)))))
  (test-point)
#+end_src

#+RESULTS:
: Point is at position 13103

*** Elisp ~save-excursion~ function :ATTACH:
:PROPERTIES:
:ID:       1ee370d2-d148-4622-b815-054c11cf0630
:END:
This is a useful function that will evaluate some expressions from it's budy,
then after everything is evaluated, it will restore the original point
position so the user doesn't notice anything. It is useful in functions that
need to manupulate the point, or switch buffers, but user doesn't expect the
changed position as a side-effect.

The template for this function looks like this

#+begin_example
(save-excursion
  FIRST-EXPRESSION-IN-BODY
  SECOND-EXPRESSION-IN-BODY
  THIRD-EXPRESSION-IN-BODY
   ...
  LAST-EXPRESSION-IN-BODY)
#+end_example
** Common LISP
Currently reading: [[https://gigamonkeys.com/book][Book]]
*** Resources
1) [[https://gigamonkeys.com/book/][Practical Common Lisp]]
2) [[https://lispcookbook.github.io/cl-cookbook/iteration.html][Lisp cook book]]
*** Functions in common lisp
:PROPERTIES:
:SOURCE:   https://gigamonkeys.com/book/functions.html
:END:
#+begin_src emacs-lisp
;; Mandatory parameters, all should be supplied
(defun func (a b c) ...)

;; Optional parameters, should be supplied in same order, but some are optional
(defun func (&optional a b c) ...)

;; All types of parameters can be combined
;; Optional parameters can have a default value (like D here) and also a boolean showing if it was really supplied or not
(defun func (a b &optional c (d 10 d-supplied-p)) ...)

;; variable parameters (varargs), any number of parameters can be passed to the function
;; All of them will be "caught" by this last VALUES paramter
(defun func (a b &rest values) ...)

;; keyword parameter are like optional ones, but more flexible
;; since they can be called in different order
(defun func (&key a (b 20) (c 10 c-supplied-p)) ...)
;; can then be called
(func (:b 1 :a 2))

;; HOF:: you can supply functions as arguments
(sort (function x) list)
;; (function x) has a shortcut - #'x
(sort #'x list)

;; Anonymous functions are defined with (lambda ...)
(sort #'(lambda (x y) ...body) list)
#+end_src
*** Variables in common lisp
:PROPERTIES:
:SOURCE:   https://gigamonkeys.com/book/variables.html
:END:
Common lisp are of 2 different types:
- Dynamic a.k.a global
- Lexical a.k.a local variables

**Lexical** variables are the ones that are bound by function parameters, or **let** expression.

#+begin_src common-lisp
(defun myfunc (a b)
    "Here A and B are lexically scoped variables
They can be used only within the function definition.
Or passed as parameters to other functions.
Or captured in a closure"
  (+ a b)
  (foo a b)
  #'(lambda () (+ a b 1))) ; Captures both variables A and B in a closure
#+end_src

**Dynamic** variables are defined with **DEFVAR** and **DEFPARAMETER**.
#+begin_comment
Difference between DEFVAR and DEFPARAMETER is visible only when reloading the environment.
DEFVAR does assign a value to the variable only if it's undefined, while DEFPARAMETER does this
every time the environment is restarted.
#+end_comment

**Constant** values are defined with DEFCONSTANT
*** Constrol constructs
Common constrol constructs in lisp are:
+ IF statement. What makes them harder to use is that yuo can have only one form as =then= or =else= parts.
  If you want to extend this, you can use =progn=
  #+begin_src common-lisp
(if (cond)
    (then-form)
  (else-form))
  #+end_src
+ WHEN and UNLESS are constructs that also help with evaluating more forms conditionally.
  #+begin_src common-lisp
;; When something is true, execute the body
(when (condition)
  (form-1)
  (form-n))

;; When something is false, executer the body
(unless (condition)
  (form-1)
  (form-n))
  #+end_src
+ COND is a construct that helps write branches like if - else if - else
#+begin_src common-lisp
(cond ((< 1 0) (print "impossible"))
      ((= 1 2) (print "please no"))
      (t (print "This is the else")))
#+end_src

#+RESULTS:
: This is the else
**** LOOPS in common-lisp
+ DOLIST and DOTIMES are just abstraction macros over the more generic DO macros
#+begin_src emacs-lisp
;; DO construct
(DO ((i 0 (+ i 1)))
    ((> i 10) i)
  (print i))

;; DOLIST construct
(dolist (i '(1 2 3 4 5 6))
  (print i))

;; DOTIMES construct
(dotimes (i 10)
  (print i))

#+end_src
+ LOOP macro is a very powerfull looping mechanism
  Some examples of LOOP can be seen [[https://lispcookbook.github.io/cl-cookbook/iteration.html][here]]
*** Macros
**** Destructuring parameters
When desigining a macro, you might want to group some parameters together by their meaning.
For example:
#+begin_src common-lisp
;; This is an example call
(my-do-times (x 0 19))

;; You might want to do it like this
(defmacro my-do-times (var-range)
  (let ((var (first var-range))
        (start (second var-range))
        (end (third var-range)))
    `(do-the-expansion)))
#+end_src

While this would work. There is a shorter way, called destructuring parameters.

#+begin_src common-lisp
(defmacro my-do-times ((var start end))
  `(do-the-expansion))
#+end_src
**** Backquote =`= construct
When building macros, the =`= (which is shorthand for function =backquote=) is very handy.
Basically what is does, it prevents the form being evaluated, like with =quote=, but you can also evaluate certain
forms that you need, so basically it works just like string with placeholders, but for generating code.

| Backquote Syntax    | Equivalent List-Building Code           | Result           |
|---------------------+-----------------------------------------+------------------|
| `(a (+ 1 2) c)      | (list 'a '(+ 1 2) 'c)                   | (a (+ 1 2) c)    |
| `(a ,(+ 1 2) c)     | (list 'a (+ 1 2) 'c)                    | (a 3 c)          |
| `(a (list 1 2) c)   | (list 'a '(list 1 2) 'c)                | (a (list 1 2) c) |
| `(a ,(list 1 2) c)  | (list 'a (list 1 2) 'c)                 | (a (1 2) c)      |
| `(a ,@(list 1 2) c) | (append (list 'a) (list 1 2) (list 'c)) | (a 1 2 c)        |
**** Preventing leaks in macros
:PROPERTIES:
:ID:       6b4c6564-7ddb-46d6-b256-18e7c272747c
:END:

There are certain scenarios when macros can cause problems.

1. When a parameter passed to a macro is evaluated more than once.
   User might be using a =random= form and evaluating it more than once will yiels differnt results
   =Fix=: Make sure every parameter passed to a macro is evaluated only once, by placing it in a binding construct
   like =let=.
2. Forms passed as parameters are evaluated in different order as they were passed to the macro
   This might have really undesirable effect if those forms have any kind of side effects.
   =Fix=: Always place the placeholders in the order they were supplied to the macro.
3. Helper symbols bound in the macro body might unintentionally shadow some outer variables, leading
   to incorrect behavior or infinite loops.
   =Fix=: In order to avoid collisions, use functions as [[id:696f7aef-a198-4aa7-8226-a34e1719b960][Gensym]]
**** Gensym
:PROPERTIES:
:ID:       696f7aef-a198-4aa7-8226-a34e1719b960
:END:
Gensym function generates a symbol that is meant to be unique whithin current lisp program runtime.
This is particularly usefull when writing [[id:6b4c6564-7ddb-46d6-b256-18e7c272747c][macros]].

#+begin_src common-lisp
(let ((random-symbol (gensym)))
  (print random-symbol))
#+end_src

** Sharepoint
*** API permissions setup in sharepoint
Setup Graph API permissions

In ~/config/package-solution.json~ add following:

#+begin_src js
...
"webApiPermissionRequests": [
      {
        "resource": "Microsoft Graph",
        "scope": "User.ReadBasic.All"
      }
    ]
...
#+end_src
*** Ensure all SPFX resources created
When a web part is added to a site, we can first make sure that required lists are created so the user doesn't need to create them manually.

A convenient way to do this is when property pane is opened:
#+begin_src js
protected async loadPropertyPaneResources(): Promise<void> {
  return import(
    /* webpackChunkName: 'MyWebPart' */
    './property/PropertyComponent'
  ).then(component => {
    // Ensure all lists and fields are created
    EnsureAllCreated();
  });
}
#+end_src
*** Sharepoint list
**** Ensure list exists
#+begin_src js
const listEnsureResult = await sp.web.lists.ensure("My List");

// check if the list was created, or if it already existed:
if (listEnsureResult.created) {
    console.log("My List was created!");
} else {
    console.log("My List already existed!");
}

// work on the created/updated list
const r = await listEnsureResult.list.select("Id")();

// log the Id
console.log(r.Id);
#+end_src
*** Sharepoint fields
**** Field types
|-------------------+--------------------------------------------------------------------------------------------------------------------------------|
| Member name       | Description                                                                                                                    |
|-------------------+--------------------------------------------------------------------------------------------------------------------------------|
| Invalid           | Must not be used. The value = 0.                                                                                               |
| Integer           | Specifies that the field contains an integer value. The value = 1.                                                             |
| Text              | Specifies that the field contains a single line of text. The value = 2.                                                        |
| Note              | Specifies that the field contains multiple lines of text. The value = 3.                                                       |
| DateTime          | Specifies that the field contains a date and time value or a date-only value. The value = 4.                                   |
| Counter           | Specifies that the field contains a monotonically increasing integer. The value = 5.                                           |
| Choice            | Specifies that the field contains a single value from a set of specified values. The value = 6.                                |
| Lookup            | Specifies that the field is a lookup field. The value = 7.                                                                     |
| Boolean           | Specifies that the field contains a Boolean value. The value = 8.                                                              |
| Number            | Specifies that the field contains a floating-point number value. The value = 9.                                                |
| Currency          | Specifies that the field contains a currency value. The value = 10.                                                            |
| URL               | Specifies that the field contains a URI and an optional description of the URI. The value = 11.                                |
| Computed          | Specifies that the field is a computed field. The value = 12.                                                                  |
| Threading         | Specifies that the field indicates the thread for a discussion item in a threaded view of a discussion board. The value = 13.  |
| Guid              | Specifies that the field contains a GUID value. The value = 14.                                                                |
| MultiChoice       | Specifies that the field contains one or more values from a set of specified values. The value = 15.                           |
| GridChoice        | Specifies that the field contains rating scale values for a survey list. The value = 16.                                       |
| Calculated        | Specifies that the field is a calculated field. The value = 17.                                                                |
| File              | Specifies that the field contains the leaf name of a document as a value. The value = 18.                                      |
| Attachments       | Specifies that the field indicates whether the list item has attachments. The value = 19.                                      |
| User              | Specifies that the field contains one or more users and groups as values. The value = 20.                                      |
| Recurrence        | Specifies that the field indicates whether a meeting in a calendar list recurs. The value = 21.                                |
| CrossProjectLink  | Specifies that the field contains a link between projects in a Meeting Work space site. The value = 22.                        |
| ModStat           | Specifies that the field indicates moderation status. The value = 23.                                                          |
| Error             | Specifies that the type of the field was set to an invalid value. The value = 24.                                              |
| ContentTypeId     | Specifies that the field contains a content type identifier as a value. The value = 25.                                        |
| PageSeparator     | Specifies that the field separates questions in a survey list onto multiple pages. The value = 26.                             |
| ThreadIndex       | Specifies that the field indicates the position of a discussion item in a threaded view of a discussion board. The value = 27. |
| WorkflowStatus    | Specifies that the field indicates the status of a workflow instance on a list item. The value = 28.                           |
| AllDayEvent       | Specifies that the field indicates whether a meeting in a calendar list is an all-day event. The value = 29.                   |
| WorkflowEventType | Specifies that the field contains the most recent event in a workflow instance. The value = 30.                                |
| Geolocation       |                                                                                                                                |
| OutcomeChoice     |                                                                                                                                |
| MaxItems          | Must not be used. The value = 31.                                                                                              |
|-------------------+--------------------------------------------------------------------------------------------------------------------------------|

**** Add new field to a list
#+begin_src js
import { sp } from "@pnp/sp";
import { IField } from "@pnp/sp/fields/types";
import "@pnp/sp/webs";
import "@pnp/sp/lists";
import "@pnp/sp/fields";

// create a new field called 'My Field' in web.
const field: IFieldAddResult = await sp.web.fields.add("My Field", "SP.FieldText", { FieldTypeKind: 3, Group: "My Group" });
// create a new field called 'My Field' in the list 'My List'
const field2: IFieldAddResult = await sp.web.lists.getByTitle("My List").fields.add("My Field", "SP.FieldText", { FieldTypeKind: 3, Group: "My Group" });

// we can use this 'field' variable to run more queries on the field:
const r = await field.field.select("Id")();

// log the field Id to console
console.log(r.Id);
#+end_src

To add a use type field, use type SP.FieldUser
#+begin_src js
await list.fields.add("MyUser", "SP.FieldUser", { FieldTypeKind: 20 });
#+end_src
*** Create sharepoint JSON formats from html and css
To create JSON format for a Sharepoint list from html and css, use:
https://pnp.github.io/List-Formatting/tools/html-formatter-generator/
*** Remove buttons from command bar
:PROPERTIES:
:SOURCE:   https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/view-commandbar-formatting
:ID:       03016867-8d3a-4f5a-9b04-e3e1530134a8
:END:
There is a convenient JSON property for editing the buttons on a list's command bar.

Below an example of view format.
#+begin_src json
{
  "$schema": "https://developer.microsoft.com/json-schemas/sp/v2/row-formatting.schema.json",
  "commandBarProps": {
    "commands": [
      {
        "key": "new",
        "hide": true
      },
      {
        "key": "automate",
        "hide": true
      },
      {
        "key": "integrate",
        "hide": true
      }
    ]
  }
}
#+end_src
*** Hide list from users
:PROPERTIES:
:SOURCE:   https://youtu.be/kVb4E99sxMw
:END:
Another possibility is to [[id:03016867-8d3a-4f5a-9b04-e3e1530134a8][Remove buttons from command bar]]
*** Package sharepoint solution
Project metadata is stored in ~package-solution.json~

To package the project use commands:
1. ~gulp clean~
2. ~gulp build~
3. ~gulp bundle --ship~
4. ~gulp package-solution --ship~

~--ship~ flag is needed because by default all your js/css/media files will not be packaged and will be served from localhost.
*** Pnpjs version 3 install typescript compiler
In order for pnp/js v3 to work, you need a new version of typescript-rush-compiler:

Steps:
1. ~npm uninstall @microsoft/rush-stack-compiler-3.?~ \- replace ~?~ with your version
2. ~npm i @microsoft/rush-stack-compiler-4.2~
3. Update tsconfig.json to extend the 4.2 config: ~"extends": "./node_modules/@microsoft/rush-stack-compiler-4.2/includes/tsconfig-web.json"~
4. Add this line in your ~gulpfile.js~

#+begin_src typescript
build.tslintCmd.enabled = false;
#+end_src
*** IDEA Store user specific data, like cache, or read comments, in his own OneDrive, in a json document for example
** Rust
:PROPERTIES:
:ID:       fb389731-9b2f-4380-98af-21ad3e832e66
:END:
*** Resources
- https://github.com/joaocarvalhoopen/How_to_learn_modern_Rust
- [[https://www.rust-lang.org/learn]]
- [[https://www.freecodecamp.org/news/rust-in-replit/]]
- [[https://youtube.com/c/JonGjengset]]
- [[https://dystroy.org/blog/how-not-to-learn-rust/]]
- [[https://cheats.rs/]]
- [[https://learning-rust.github.io/docs/d1.code_organization.html]]
*** Cargo
Cargo is the [[id:fb389731-9b2f-4380-98af-21ad3e832e66][Rust's]] package manager.

Documentation can be found at https://doc.rust-lang.org/cargo/
*** Function return value
:PROPERTIES:
:ID:       0805088e-3c3c-44a0-b4ba-9ace2265c8ce
:END:
In Rust functions, there are few ways to specify a return value

**** Implicit
If last thing appearing in a function body is an expression (note there is no semicolon after it, see [[id:f7eca509-01e4-4dd7-a148-87d507717c96][Statement vs expression]]) then it will be returned from this function. This is also called the tail of the function.

#+begin_src rust
fn sum(a: i32,  b: i32) -> i32 {
    a + b
}
#+end_src
**** Explicit
Explicitly returning a value from a function is done using `return` keyword

#+begin_src rust
fn sum(a: i32,  b: i32) -> i32 {
    return a + b;
}
#+end_src

Functions that do not return anything, implicitly return [[id:518a6495-1676-408d-8c4b-3981796bf22e][Unit type]].
*** Unit type
:PROPERTIES:
:ID:       518a6495-1676-408d-8c4b-3981796bf22e
:END:
Unit ~()~ type is a special type in Rust.

It has only one value – ~()~.

Most of the time, this value is used implicitly. Functions that do not have a ~->~ (return type) specified, return the unit type.

An [[id:f7eca509-01e4-4dd7-a148-87d507717c96][expression]] can be forced to return ~()~ by placing a semicolon ~;~ after it. (see [[id:0805088e-3c3c-44a0-b4ba-9ace2265c8ce][Function return value]])

Example:
#+begin_src rust
// This returns unit type ()
fn unit() -> () {
    4;
}

// this returns an i32
fn intret() -> i32 {
    4
}
#+end_src
*** Statement vs expression
:PROPERTIES:
:ID:       f7eca509-01e4-4dd7-a148-87d507717c96
:END:
Rust is an expression based language.

**** Differences:
- Statement do not have a return value (ex ~let a = 5;~ is a statement)
- Expressions have a return type (ex ~6 + 5~ is a expression, a function call is an expression)
- Expressions can be part of a statement (~let a = 6 + 5~, here ~6 + 5~ is an expression which is part of a statement)

Good way to think about it. Statements are complete, so they should have some finishing symbol at the end (in our case the semicolon ~;~)
*** Ownership rules
:PROPERTIES:
:ID:       501baa50-6e78-4c9e-9c9c-a4e70467dd81
:END:
- Each value in Rust has a variable that’s called its owner.
- There can only be one owner at a time.
- When the owner goes out of scope, the value will be dropped.
*** How memory is dropped
Memory is dropped automatically when the scope where memory is [[id:501baa50-6e78-4c9e-9c9c-a4e70467dd81][owned]] is over.
To drop memory, function ~drop~ is called
*** How to lint rust code
1.  Use ~cargo check~
2.  Use ~cargo clippy~

For help use ~cargo help check~ or ~cargo help clippy~
*** Loop labels
You can label loops in Rust in order to gain more control.

#+begin_src rust
fn main() {
    'outer: loop {
        loop {
            break 'outer;
        }
    }
}
#+end_src
*** Memory allocation
**** When memory is allocated?
In Rust, memory is allocated from the moment a variable is created.

**** When memory is deallocated?
Memory is deallocated when the variable that owns the memory (see [[id:501baa50-6e78-4c9e-9c9c-a4e70467dd81][Ownership rules]]) goes out of scope

**** Example:
#+begin_src rust
fn main() {
    {
        let s = String::from("hello"); // s is valid from this point forward

        // do stuff with s
    }                                  // this scope is now over, and s is no
                                       // longer valid
}
#+end_src

For scalar data types, variable sizes are known at compile time, so they are stored entirely on the stack. In this case, memory is allocated when a new stackframe is created, and deallocated when the stack frame is popped.
*** Optimize rust binary for size
By default on Linux and macOS, symbol information is included in the compiled ~.elf~ file. This information is not needed to properly execute the binary. To remove this, run strip on the ~.elf~ file:

#+begin_src sh
$ strip target/release/min-sized-rust
#+end_src
For more possibilities, see: https://github.com/johnthagen/min-sized-rust
** CSS
*** SCSS
**** Placeholder class
In scss, a placeholder class is a class that starts with ~%~ instead of a ~.~

#+begin_src scss
%flex {
    display: flex;
}

.some-real-class {
    @extend %flex; // This will add %flex styles to current class
    // other styles
}
#+end_src
*** Collapsible element
To make a collapsible element with Css, just transition the ~max-height~ property

#+begin_src css
.content {
    max-height: 100vh; /* should be big enough to fit content */
    overflow: hidden;
    transition: max-height 1s linear;
}

/* Example */
.content.collapsed {
    max-height: 0;
}
#+end_src
*** Positioning
Possible values: ~sticky~, ~relative~, ~fixed~, ~absolute~ and ~sticky~.
Be default, position is ~static~.
With position ~relative~, the element will be positioned relative to it's normal (static) position. Properties ~left~, ~top~, ~right~, ~bottom~ can be used to move the element.
Position ~fixed~ places the element relative to the viewport.
Position ~abosolute~ is placed relative to the nearest positioned ancestor. (with position ~relative~). \\\*\\\*Absolute positioned elements are removed from normal document flow, and are not part of parent's width and height.
Position ~sticky~ is a combination of ~relative~ and ~fixed~ position. And it depends on current user's scroll position. \*\*For ~sticky~ positioning to work, at least one of ~left~, ~right~, ~top~, ~bottom~ properties need to be specified.\*\* Useful to implement things like sticky headers as you scroll. (the ones that remain on the top when you scroll past them).
** C# (csharp)
*** Debugging c# tests in vscode
Create a \*.runsettings file, example:

#+begin_src xml
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <RunConfiguration>
    <ResultsDirectory>.\TestResults</ResultsDirectory>

    <TargetPlatform>x64</TargetPlatform>

    <TargetFrameworkVersion>net48</TargetFrameworkVersion>
  </RunConfiguration>
</RunSettings>
#+end_src

In ~settings.json~, add the file you created:
#+begin_src json
    "omnisharp.testRunSettings": "MyRunSettings.runsettings",
#+end_src

In ~*.csproj~ file, add:
#+begin_src xml
<PropertyGroup>
    ...
    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>
    ...
</PropertyGroup>
#+end_src

Create launch.json and tasks.json:
#+begin_src json
//tasks
{
    "label": "build",
    "command": "dotnet",
    "type": "shell",
    "args": [
        "build",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary"
    ],
    "group": "build",
    "presentation": {
        "reveal": "silent"
    },
    "problemMatcher": "$msCompile"
},


// launch.json
    "configurations": [
        {
            "name": ".NET Attach debugger",
            "type": "clr",
            "request": "attach"
        },
        {
            "name": "Launch tests",
            "request": "launch",
            "preLaunchTask": "build",
            "type": "coreclr",
            "program": "dotnet",
            "args": ["test", "--filter", "-v", "n"],
            "stopAtEntry": false
        }
    ],
#+end_src

The run ~Launch tests~, then wait for a test like this:

#+begin_example
Process Id: 15304, Name: testhost.net48
Waiting for debugger attach...
Process Id: 15304, Name: testhost.net48
#+end_example

After this, run ~.NET Attach debugger~, and choose the process Id that was specified by previous task

** Power query
In Power query editor, create a new blank query and add there:

#+begin_src js
(TheNumber as number) =>
let
    Source = TheNumber * TheNumber
in
    Source
#+end_src

For list of available types, see [[https://docs.microsoft.com/en-us/powerquery-m/m-spec-types][here]]
