#+STARTUP: inlineimages overview

* Everything goes here  
** Org mode
:PROPERTIES:
:ID:       5c2ad23d-b530-4671-bd70-05380e417f81
:END:
Everything i usually use in org-mode
*** Resources
Useful resources:
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
*** Initial comfortable setup
I find this initial setup quite comfortable to use.
Add below to y......fig =init.el= file:
            ... ...  ..
#+begin_src..macs   ..
(defun orgmode-setup ()
  (progn
    (require 'org-tempo)
    (org-indent-mode)
    (key-binding (kbd "C-c h o") 'outline-hide-other)
    (define-key org-mode-map (kbd "C-c h o") 'outline-hide-other)
    (setq org-id-link-to-org-use-id 'create-if-interactive)
    (auto-fill-mode)
    (set-fill-column 78)
    (message "Org-mode set up ;)"))
  )
(add-hook 'org-mode-hook 'orgmode-setup)
#+end_src
*** Enable indentation mode
To enable indentation mode (looks a bit better), add this to your
~init.el~ file:

#+begin_src emacs-lisp
(defun orgmode-setup ()
(progn (org-indent-mode)))
(add-hook 'org-mode-hook 'orgmode-setup)
#+end_src

*** Fast insertion of code blocks (and any other templates)

In order to faster insert code blocks in org mode, use either:
1. =C-c C-,= and select a template to insert
2. Enable =org-tempo= by adding below line to your =init.el= file:

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

Then, you can insert a code block by just typing =<s <TAB>=

*** Formatting
:PROPERTIES:
:ID:       ec16ac95-93f6-46fd-938a-a4d93ce52856
:END:
- /italic/
- *bold*
- _underscore_
- =verbatim=
- ~code~
- +strikethrough+

*** Tables
Any line starting with =|= symbol is interpreted as a table.  For
example wtite =|Name|Surname|Age + <TAB>= and you will start a table
**** TODO Useful shortcuts
*** Add file to org-agenda edited
:PROPERTIES:
:ID: 1ed495c7-4875-4d98-88c7-511718c4850e
:END:

Use function =org-agenda-file-to-front=, or shortcut =C-c [=.  This
will add/move the file to the front of variable list
=org-agenda-files= If you add a directory, it will add all the files
from this directory.

*** Searching in org-mode
You can use your agenca (=C-c a=) as a search engine.

A good resource on this search -
[[https://orgmode.org/worg/org-tutorials/advanced-searching.html]]

1. Make sure all your files/directories are added visible to agenda
   (see [[id:1ed495c7-4875-4d98-88c7-511718c4850e][Add file to org-agenda]])
2. Enter agenda search view with =C-c a s=
3. Here you can search either simple strings - =ex: mystring=, or
   search multiple keywords (=+type +class= will search for entries
   containing both words =type= and =class=).

*NOTE:* If search doesn't start with a character like =+, -, \*= it
will be interpreted as a literal string search

*NOTE:* If you use minus sign instead of plus, you will exclude a
word, so =+type -class= will search for all entries containing =type=
and not contianing =class= You can also search on regulas expressions,
example =+{type\|class}= will search entries containing =type= or
=class= keywords (notice the escaped /pipe/ character)
*** Add image to org file
An image is just a link without protocol

#+begin_example
[[./images/image-of-cat.jpg]]
#+end_example


**** Display inline image
To display the image inline, use =C-c C-x v= (/org-toggle-inline-images/)
As an alternative, set the startup buffer variable at the top of the file (see
[[info:org#In-buffer Settings][info:org#In-buffer Settings]])

#+begin_example
#+STARTUP: inlineimages
#+end_example

**** Set inline image size (width/height)
When adding a image, you can specify a property for inline display:

#+begin_example
#+attr_org: :width 100
[[./images/image-of-cat.jpg]]
#+end_example

** Emacs
:PROPERTIES:
:ID:       b01035fa-063f-410e-9ea9-94167530cc02
:END:

Notes on emacs itse
*** Disable annoying backup files

**** Specify another directory

For more info, see [[info:emacs#Backup][manual]] To stop emacs from making backup files in
the same directory, you can add following to your =init.el= file:

#+begin_src emacs-lisp
;; Backup to another directory
(setq backup-directory-alist '(("." . "~/.emacs.backups")))
 #+end_src

You can then create a directory as specified and all backup files will
go in there.

*** Disable backups

To disable making backup files at all, set below variable:

#+begin_src emacs-lisp
(setq make-backup-files -1)
#+end_src
*** Drawing ascii diagrams
Easiest way to draw ascii diagrams in emacs is [[https://asciiflow.com][asciiflow]]

*** Write code blocks in language mode
You can write a source block in a separate window with it's appropriate mode
turned on by pressing =C-c '= shortcut. When done, press =C-c '= again to
finish editing.
*** Return back after search
After typing =C-s search string= in emacs and navigating through results, you might
want to return back to original position.
You can do this with =C-u C-SPACE=. What it does it pops marks from the mark
ring, that is filled when you jump.
*** Edit code blocks in a separate buffer
If you have a code/source block and you want to edit it in it's own language
mode, you can press =C-c '= and a new buffer will be opened where you can edit
the code. Then, after you're done, press =C-c '= again and code will be
transferred to org mode source block
** Misc
*** Haircut
Notes about self haircut, whatever:
**** Guard sizes
|-------------------------------------+--------------------------|
| Clipper Guard Number                | Size in Millimeters (mm) |
|-------------------------------------+--------------------------|
| Number 0 (or 1/2 for Wahl Clippers) |                      1.5 |
| Number 1                            |                        3 |
| Number 2                            |                        6 |
| Number 3                            |                       10 |
| Number 4                            |                       13 |
| Number 5                            |                       16 |
| Number 6                            |                       19 |
| Number 7                            |                       22 |
| Number 8                            |                       25 |
| Number 10                           |                       32 |
| Number 12                           |                     37.5 |
|-------------------------------------+--------------------------|
**** Haircut videos:
[[https://www.youtube.com/watch?v=wNlxye9kF2E][How to Cut the Sides of Your Own Hair | The Up and Down Method]]

* Programming
** General
*** Workflow. In this order:
When working on a feature, i will usually follow below steps:

1. Make it work
2. Make it fast
3. Make it pretty
4. Make it clean (refactor)

** Typescript

For basic documentation on typescript see the [[https://www.typescriptlang.org/docs/handbook/2/basic-types.html][Documentation]]
*** Resources
Resources on typescript:
- Documentation: [[https://www.typescriptlang.org/docs/handbook/intro.html]]
*** Classes
Classes documentation can be found [[https://www.typescriptlang.org/docs/handbook/2/classes.html][here]]
*** Functions
test                                                                                                    
** Powershell                                                                                                                                                                                       
*** Create ssh key in windows and add it to github
:PROPERTIES:
:ID:       e1d81e89-b499-42a8-a2d2-368d0a23e8d5
:END:
1. Create an Ssh key with Powershell ~ssh-keygen -c andrei.dimitrascu@gmail.com~
2. run in ~Powershell Get-Content -Path $HOME\.ssh\id_rsa.pub | Set-Clipboard~
   to save your public key to the clipboard
3. Go to https://github.com/settings/ssh/new and add the content of your public key file
4. Restart all terminal sessions, if =HOME= Environmental variable is set
   correctly Git should start working with the new Ssh key (it will look for
   =%HOME%/.ssh/id_rsa= file)

*** Create link in powershell
There are 2 types of files in windows, soft and hard.
- =Soft links=: just like regular links, there is an arrow symbol next to the icon.
- =Hard links=: Make it appear like the file is really on the location,
  although it's a link.

#+begin_src powershell
# Create soft link
# Path can be either a file or a folder

> New-Item -ItemType SymbolicLink -Path "PathWhereLinkShouldBeCreated" -Target "Target"

# Create hard link for a file

> New-Item -ItemType HardLink -Path "PathWhereLinkShouldBeCreated" -Target "Target"

# Create hard link for a folder (junction point)
 
> New-Item -ItemType Junction -Path "PathWhereLinkShouldBeCreated" -Target "Target"
#+end_src
*** Measure command execution time in powershell
#+begin_src powershell
Measure-Command { Invoke-Expression "cargo run" | Out-Default } 
#+end_src
*** Powershell add command line arguments
#+begin_src powershell
[CmdletBinding()]
param (
    [Parameter()]
    [string]
    $paths,
    [Parameter()]
    [string]
    $destination
)

# Logic
Write-Output "$paths and $destination"
#+end_src
*** Powershell check if file exists
:PROPERTIES:
:ID:       753964a2-937e-4166-b82a-e8c4e1ea60e7
:END:
#+begin_src powershell
if (-Not (Test-Path -Path $paths)) {
   # Logic   
}
#+end_src
** T-SQL
*** 3VL or Ternary logic
Ternary logic in T-SQL represents predicates which may have 3 values:

1. TRUE
2. FALSE
3. UNKNOWN :: *UNKNOWN value is used when one of the operands is NULL*

Rules of ternary logic:

Any comparison of 2 =UNKNOWNs= is also =UNKNWON=
Comparison of any =KNOWN= value to =UNKNOWN= value is also =UNKNOWN=
A State predicate (a strict Yes or No question), always evaluates to =TRUE= or =FALSE=
*** Aggregate functions
Aggregate functions are the ones that take multiple values, and return a single value. Examples of aggregate functions:

1. MAX
2. MIN
3. AVG
4. COUNT

Source: https://docs.microsoft.com/en-us/sql/t-sql/functions/aggregate-functions-transact-sql?view=sql-server-ver16
** Elisp (emacs-lisp)
*** Hello world
#+begin_src elisp
  (print "Hello world")
#+end_src
*** Working with buffers
There are several function for working with buffers

#+begin_src elisp :eval no
  ;; returns the buffer name
  (buffer-name)

  ;; returns the file name associated with the buffer
  (buffer-file-name)

  ;; returns the current buffer object
  (current-buffer)

  ;; returns the buffer object used before current-buffer
  (other-buffer)

  ;; Get buffer by name
  (get-buffer "*scratch*")

  ;; Switching to another buffer
  ;; Same as when pressing C-x b <buffer-name>
  (switch-to-buffer (other-buffer))

  ;; Set current buffer to...
  (set-buffer (other-buffer))
#+end_src

#+RESULTS:
: #<buffer init.el>
**** Buffer size and cursor

Determining the buffer size and the position of the cursor

#+begin_src elisp
  ;; Getting buffer size
  (buffer-size (current-buffer))

  ;; Getting the position of the cursor in the current buffer
  (point)

  ;; Getting the minimum position of the pointer (always 1?)
  (point-min)

  ;; Getting the max possible position of the pointer (always = buffer-size + 1?)
  (point-max)
#+end_src

#+RESULTS:
: 9074
*** Defining functions in emacs lisp
Function definition parts:
#+begin_example
(defun FUNCTION-NAME (ARGUMENTS...)
  "OPTIONAL-DOCUMENTATION..."
  (interactive ARGUMENT-PASSING-INFO)     ; optional
  BODY...)
#+end_example
*** Interactive functions in emacs lisp
An interactive function is a simple function with ~(interactive)~ specified in
it's definition

#+begin_src elisp
  (defun multiply-by-seven (number)
    "This function simply multiplies a number by 7"
    (interactive "p")
    (message "Result is %d" (* number 7)))
#+end_src

#+RESULTS:
: multiply-by-seven
**** Interactive arguments
There are more characters that can be passed to ~interactive~ as arguments.
See [[info:elisp#Interactive Codes][info:elisp#Interactive]]
*** Predicates and boolean tests in elisp
:PROPERTIES:
:ID:       1d004eef-7276-403b-9ac8-d311d619f3e4
:END:
Any predicates in elisp return either ~nil~ or anything else.
In fact, =false= value is just ~nil~. Anything else is interpreted as =true=.
*** Elisp ~if~ keyword
The if keyword can be used as follows in elisp:
For details on how =test= part decides where to go, see [[id:1d004eef-7276-403b-9ac8-d311d619f3e4][Predicates and boolean tests in elisp]]

#+begin_src elisp
  (defun test-point ()
    "Showcasing 'if' usage"
    (let ((pos (point)))
            (if (> pos 10)
                (message "Point is at position %d" pos
              (message "Point position too low (%d)" pos)))))
  (test-point)
#+end_src

#+RESULTS:
: Point is at position 10472
*** Elisp ~save-excursion~ function
This is a useful function that will evaluate some expressions from it's budy,
then after everything is evaluated, it will restore the original point
position so the user doesn't notice anything. It is useful in functions that
need to manupulate the point, or switch buffers, but user doesn't expect the
changed position as a side-effect.

The template for this function looks like this

#+begin_example
(save-excursion
  FIRST-EXPRESSION-IN-BODY
  SECOND-EXPRESSION-IN-BODY
  THIRD-EXPRESSION-IN-BODY
   ...
  LAST-EXPRESSION-IN-BODY)
#+end_example
