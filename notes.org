#+STARTUP: inlineimages overview

* Everything goes here
** Org mode
:PROPERTIES:
:ID:       5c2ad23d-b530-4671-bd70-05380e417f81
:END:
Everything i usually use in org-mode
*** Resources
Useful resources:
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
*** Initial comfortable setup
I find this initial setup quite comfortable to use.
Add below to y......fig =init.el= file:
            ... ...  ..
#+begin_src..macs   ..
(defun orgmode-setup ()
  (progn
    (require 'org-tempo)
    (org-indent-mode)
    (key-binding (kbd "C-c h o") 'outline-hide-other)
    (define-key org-mode-map (kbd "C-c h o") 'outline-hide-other)
    (setq org-id-link-to-org-use-id 'create-if-interactive)
    (auto-fill-mode)
    (set-fill-column 78)
    (message "Org-mode set up ;)"))
  )
(add-hook 'org-mode-hook 'orgmode-setup)
#+end_src
*** Enable indentation mode
To enable indentation mode (looks a bit better), add this to your
~init.el~ file:

#+begin_src emacs-lisp
(defun orgmode-setup ()
(progn (org-indent-mode)))
(add-hook 'org-mode-hook 'orgmode-setup)
#+end_src

*** Fast insertion of code blocks (and any other templates)

In order to faster insert code blocks in org mode, use either:
1. =C-c C-,= and select a template to insert
2. Enable =org-tempo= by adding below line to your =init.el= file:

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

Then, you can insert a code block by just typing =<s <TAB>=

*** Formatting
:PROPERTIES:
:ID:       ec16ac95-93f6-46fd-938a-a4d93ce52856
:END:
- /italic/
- *bold*
- _underscore_
- =verbatim=
- ~code~
- +strikethrough+

*** Tables
Any line starting with =|= symbol is interpreted as a table.  For
example wtite =|Name|Surname|Age + <TAB>= and you will start a table
**** TODO Useful shortcuts
*** Add file to org-agenda edited
:PROPERTIES:
:ID: 1ed495c7-4875-4d98-88c7-511718c4850e
:END:

Use function =org-agenda-file-to-front=, or shortcut =C-c [=.  This
will add/move the file to the front of variable list
=org-agenda-files= If you add a directory, it will add all the files
from this directory.

*** Searching in org-mode
You can use your agenca (=C-c a=) as a search engine.

A good resource on this search -
[[https://orgmode.org/worg/org-tutorials/advanced-searching.html]]

1. Make sure all your files/directories are added visible to agenda
   (see [[id:1ed495c7-4875-4d98-88c7-511718c4850e][Add file to org-agenda]])
2. Enter agenda search view with =C-c a s=
3. Here you can search either simple strings - =ex: mystring=, or
   search multiple keywords (=+type +class= will search for entries
   containing both words =type= and =class=).

*NOTE:* If search doesn't start with a character like =+, -, \*= it
will be interpreted as a literal string search

*NOTE:* If you use minus sign instead of plus, you will exclude a
word, so =+type -class= will search for all entries containing =type=
and not contianing =class= You can also search on regulas expressions,
example =+{type\|class}= will search entries containing =type= or
=class= keywords (notice the escaped /pipe/ character)
*** Add image to org file
An image is just a link without protocol

#+begin_example
[[./images/image-of-cat.jpg]]
#+end_example


**** Display inline image
To display the image inline, use =C-c C-x C-v= (/org-toggle-inline-images/)
As an alternative, set the startup buffer variable at the top of the file (see
[[info:org#In-buffer Settings][info:org#In-buffer Settings]])

#+begin_example
#+STARTUP: inlineimages
#+end_example

**** Set inline image size (width/height)
When adding a image, you can specify a property for inline display:

#+begin_example
#+attr_org: :width 100
[[./images/image-of-cat.jpg]]
#+end_example

*** Edit code blocks in a separate buffer
If you have a code/source block and you want to edit it in it's own language
mode, you can press =C-c '= and a new buffer will be opened where you can edit
the code. Then, after you're done, press =C-c '= again and code will be
transferred to org mode source block
*** Attachments :ATTACH:
To attach a file to an org document, use the ~M-x org-attach~ command
It will present you some options on what to attach.
To attach images, you can use packages like ~org-download~ or ~org-attach-screenshot~ but it's hardly worth it, ~org-attach-screenshot~ was even crashing my machine.

Setting up below in your init.el file will actually store a link to the attachment, so it can be easily inserted as a link
#+begin_src emacs-lisp
(setq org-attach-store-link-p 'attached)
#+end_src

Example below:
- Attach the file using ~C-c C-a u~ and pasting the url
- Link the file using ~C-c C-l~ and selecting the attached file
- (Optional) adding the ~#+attr_org~ parameters to set file width

#+attr_org: :width 500
[[attachment:1200px-Org-mode-unicorn.svg.png]]

** Emacs
:PROPERTIES:
:ID:       b01035fa-063f-410e-9ea9-94167530cc02
:END:

Notes on emacs itse
*** Disable annoying backup files

**** Specify another directory

For more info, see [[info:emacs#Backup][manual]] To stop emacs from making backup files in
the same directory, you can add following to your =init.el= file:

#+begin_src emacs-lisp
;; Backup to another directory
(setq backup-directory-alist '(("." . "~/.emacs.backups")))
 #+end_src

You can then create a directory as specified and all backup files will
go in there.

**** Disable backups

To disable making backup files at all, set below variable:

#+begin_src emacs-lisp
(setq make-backup-files -1)
#+end_src
*** Drawing ascii diagrams
Easiest way to draw ascii diagrams in emacs is [[https://asciiflow.com][asciiflow]]

*** Write code blocks in language mode
You can write a source block in a separate window with it's appropriate mode
turned on by pressing =C-c '= shortcut. When done, press =C-c '= again to
finish editing.
*** Return back after search
After typing =C-s search string= in emacs and navigating through results, you might
want to return back to original position.
You can do this with =C-u C-SPACE=. What it does it pops marks from the mark
ring, that is filled when you jump.
*** Add more refile targets
In order to add more headings and files when using [[help:org-refile][org-refile]] command (=C-c C-w=), you can
customize the [[help:org-refile-targets][org-refile-targets]] variable.

Examples:
#+begin_src emacs-lisp
  (setq org-refile-targets
        '((nil . (:level . 1))  ;; Here nil means search only current buffer
          (org-agenda-files . (:maxlevel . 2)))) ;; Search in org-agenda files
#+end_src

#+RESULTS:
: ((nil :level . 1) (org-agenda-files :maxlevel . 2))
*** Disable bell from ringing in emacs
Add this to your =init.el= file - ~(setq ring-bell-function 'ignore)~
** Misc
*** Haircut
Notes about self haircut, whatever:
**** Guard sizes
|-------------------------------------+--------------------------|
| Clipper Guard Number                | Size in Millimeters (mm) |
|-------------------------------------+--------------------------|
| Number 0 (or 1/2 for Wahl Clippers) |                      1.5 |
| Number 1                            |                        3 |
| Number 2                            |                        6 |
| Number 3                            |                       10 |
| Number 4                            |                       13 |
| Number 5                            |                       16 |
| Number 6                            |                       19 |
| Number 7                            |                       22 |
| Number 8                            |                       25 |
| Number 10                           |                       32 |
| Number 12                           |                     37.5 |
|-------------------------------------+--------------------------|
**** Instructions
- Sides: Start with 10mm, then, if too long lower to max 6mm
- Top sides of the head (to take the bulk off): again, start with 10mm, if
  nothing is going off, lower to max 6-7mm.
- Top of the head: 10mm, if nothing going off lower to 9mm (*not less*)
**** Haircut videos:
[[https://www.youtube.com/watch?v=wNlxye9kF2E][How to Cut the Sides of Your Own Hair | The Up and Down Method]]

* Programming
** General
*** Workflow. In this order:
When working on a feature, i will usually follow below steps:

1. Make it work
2. Make it fast
3. Make it pretty
4. Make it clean (refactor)
*** Cheat Sheets
Good online cheat sheets - [[https://devhints.io/]]
Command line cheat sheet - [[https://cheat.sh/]]
** Algorithms
Here i will document my solutions to various leetcode questions. I will first attempt to solve them in Python or Javascript

The attempt is to do an explanation of all the questions from this [[https://docs.google.com/spreadsheets/d/1sfaK42jUUNIz9_jsQViWCMR5B2_cos_KD31bKI-5bEg/edit#gid=0][list]]
*** Best time to buy
#+begin_example
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
#+end_example

**** Solution

Solution to this problem is of complexity ~O(n)~. Also called sliding-window technique The idea is to have two pointers. One pointing at the current lowest price, and the other at the current examined price. Also, we want to keep track of the maximum profit made during the loop. So, while we move through the list, we should keep track of 3 things:

-   the minimum price that we encountered so far
-   The maximum profit we could get
-   the current price we're at

This problem can be also solved using [[https://www.geeksforgeeks.org/largest-sum-contiguous-subarray][Kodane's algorithm]] also known as ~largest sum of contiguous subarray~.
*** Binary search
Binary search is performed on sorted collections and has a complexity of O(log n). It is part of Divide and Conquer algorithms and the key target in each step is to make the solution domain smaller, by eliminating portions that don't satisfy the requirements.
*** Binary search in a rotated sorted array :ATTACH:
:PROPERTIES:
:ID:       55e25b1a-4033-42df-943b-ae903ee65f0c
:END:
Source: [[https://leetcode.com/problems/search-in-rotated-sorted-array/][https://leetcode.com/problems/search-in-rotated-sorted-array/]]

#+begin_example
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.
#+end_example

**** Solution

Again, we see the array is sorted and that we need to solve the problem in `O(log n)` time. This almost always means binary-search, so we need to have a left, right, and middle pointer. The key concept to understand, when we take a mid pointer, which portion is sorted relative to this pointer, left or right?

[[attachment:Solution1.png]]

This is easy to check if we know what is the leftmost value of the array (and we know it). If `left <= mid` then left part is sorted, else the right part is sorted. Now that we know which part is sorted, we can check if our `target` is within that sorted part. If it is, then discard the other portion, and vice versa.

[[attachment:Solution2.png]]

In above example, target was not in our sorted (left) part, so we just discarded it and continue the search in the remaining portion.

#+begin_src python
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid;
           # Is the left part sorted?
            if nums[left] <= nums[mid]:
                # Left part is sorted
                if nums[left] <= target < nums[mid]:
                    # search the left part
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                # Right part is sorted
                if nums[mid] < target <= nums[right]:
                    # search right
                    left = mid + 1
                else:
                    right = mid - 1
        return -1
#+end_src
** Chrome extension development
*** Creating a manifest
:PROPERTIES:
:ID:       971eea90-a5a4-45c6-b8c6-42b6d54a4150
:END:
Create a manifest in the root of the project
#+begin_src text
{
  "name": "Getting Started Example",
  "description": "Build an Extension!",
  "version": "1.0",
  "manifest_version": 3,
    // File to run in background
    "background": {
    "service_worker": "background.js"
  },
  // Static content scripts
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["./scripts/main.js"],
            "run_at": "document_idle"
    }
  ],
    // Add permissions that the extension will need
    "permissions": ["storage"],
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "folder/icon.png",
      "32": "folder/icon.png",
      "48": "folder/icon.png",
      "128": "folder/icon.png"
    }
  },
  "icons": {
    "16": "./images/get_started16.png",
    "32": "./images/get_started32.png",
    "48": "./images/get_started48.png",
    "128": "./images/get_started128.png"
  }
}
#+end_src
*** Add icons to chrome extension
-   Add images of different sizes into the project folder. (16, 32, 48, 128).
-   Add `default_icon` property to [[id:971eea90-a5a4-45c6-b8c6-42b6d54a4150][manifest]]
*** Add options page in chrome extension
-   Create a html file that will be shown on options (example `options.html`)
-   Add `options_page` property to the [[id:971eea90-a5a4-45c6-b8c6-42b6d54a4150][manifest]]
-   Additionally, add respective javascript files
** Node js
*** Add eslint to project
-   Install eslint – ~npm i -D eslint~
-   Run – ~npx eslint --init~
-   Choose appropriate steps in the wizard
*** Jest
:PROPERTIES:
:ID:       4e8cb1ee-18bb-478d-85be-62a166b71cd0
:END:
Popular testing framework in JavaScript and node.

Examples and docs: [[https://jestjs.io/][https://jestjs.io/]]
**** Add jest to a project (with babel)
1.  Install [[id:4e8cb1ee-18bb-478d-85be-62a166b71cd0][Jest]] with ~npm i -D jest~
2.  If you wish to use Babel, for example you want typescript - ~npm i -D babel-jest @babel/core @babel/preset-env~ and add to ~babel.config.js~:

#+begin_src js
module.exports = {
  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],
};
#+end_src
**** Add typescript to jest
If you want to add typescript support, ~npm i --D @babel/preset-typescript @types/jest~

Then add ~@babel/preset-typescript~ to the list of presets in your ~babel.config.js~.

#+begin_src js
module.exports = {
  presets: [
    ['@babel/preset-env', {targets: {node: 'current'}}],
    '@babel/preset-typescript', // <-- this
  ],
};
#+end_src
*** Add prettier to project
**** Install

~npm i -D prettier~

**** Config file

#+begin_src js
// prettier.config.js or .prettierrc.js
module.exports = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: true,
  singleQuote: true,
};
#+end_src
*** Webpack
:PROPERTIES:
:ID:       30de9951-46cc-45cc-8d74-98d53664569b
:END:
Webpack is a code bundler
**** Add Webpack to a project
To add [[id:30de9951-46cc-45cc-8d74-98d53664569b][Webpack]] to your project:

1.  ~npm i -D webpack webpack-cli [webpack-dev-server]~
2.  Create a ~webpack.config.js~

#+begin_src js
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
    mode: 'development',
    entry: __dirname + '/index.ts',
    output: {
        path: __dirname + '/dist',
        filename: 'index.js',
        publicPath: '/'
    },
    resolve: {
        extensions: ['.ts', '.js'],
    },
    module: {
        rules: [ ]
    },
    // this plugin is necessary if you want your bundle to be added to a html while developing
    plugins: [
        new HtmlWebpackPlugin({
            template: __dirname + '/public/index.html',
            inject: 'body',
            publicPath: __dirname + '/public'
        })
    ],
}
#+end_src
** Typescript
:PROPERTIES:
:ID:       2291a412-ed3a-4b26-a489-ab11deafee44
:END:
For basic documentation on typescript see the [[https://www.typescriptlang.org/docs/handbook/2/basic-types.html][Documentation]]
*** Add typescript to webpack
-  Install ~ts-loader~
-  Add a rule to your ~webpack.config.js~

#+begin_src js
rules: [
    {
        test: /.tsx?$/,
        use: [
            {
                loader: 'ts-loader', options: { transpileOnly: true }
            }
        ]
    }
]
#+end_src

You might want to add this to your ~webpack.config.js~ as well:

#+begin_src js
module.exports {
    // ...
    entry: //...
    // ...
    resolve: {
        extensions: ['.ts', '.js'],
    },
    // ...
}
#+end_src
*** Resources
Resources on typescript:
- Documentation: [[https://www.typescriptlang.org/docs/handbook/intro.html]]
*** Classes
Classes documentation can be found [[https://www.typescriptlang.org/docs/handbook/2/classes.html][here]]
*** Functions
**** Call signature
If you want to have a callable object type with some properties in [Typescript](https://andreid049.github.io/no-brainer//#Typescript), you need a `call sugnature`

#+begin_src js
type CallableWithProps = {
    property: string;
    (name: string): void;
}

function doSomething(fn: CallableWithProps) {
   console.log(fn.property);
   fn("test");
}
#+end_src

#+RESULTS:

** Powershell
*** Create ssh key in windows and add it to github
:PROPERTIES:
:ID:       e1d81e89-b499-42a8-a2d2-368d0a23e8d5
:END:
1. Create an Ssh key with Powershell ~ssh-keygen -c andrei.dimitrascu@gmail.com~
2. run in ~Powershell Get-Content -Path $HOME\.ssh\id_rsa.pub | Set-Clipboard~
   to save your public key to the clipboard
3. Go to https://github.com/settings/ssh/new and add the content of your public key file
4. Restart all terminal sessions, if =HOME= Environmental variable is set
   correctly Git should start working with the new Ssh key (it will look for
   =%HOME%/.ssh/id_rsa= file)

*** Create link in powershell
There are 2 types of files in windows, soft and hard.
- =Soft links=: just like regular links, there is an arrow symbol next to the icon.
- =Hard links=: Make it appear like the file is really on the location,
  although it's a link.

#+begin_src powershell
# Create soft link
# Path can be either a file or a folder

> New-Item -ItemType SymbolicLink -Path "PathWhereLinkShouldBeCreated" -Target "Target"

# Create hard link for a file

> New-Item -ItemType HardLink -Path "PathWhereLinkShouldBeCreated" -Target "Target"

# Create hard link for a folder (junction point)

> New-Item -ItemType Junction -Path "PathWhereLinkShouldBeCreated" -Target "Target"
#+end_src
*** Measure command execution time in powershell
#+begin_src powershell
Measure-Command { Invoke-Expression "cargo run" | Out-Default }
#+end_src
*** Powershell add command line arguments
#+begin_src powershell
[CmdletBinding()]
param (
    [Parameter()]
    [string]
    $paths,
    [Parameter()]
    [string]
    $destination
)

# Logic
Write-Output "$paths and $destination"
#+end_src
*** Powershell check if file exists
:PROPERTIES:
:ID:       753964a2-937e-4166-b82a-e8c4e1ea60e7
:END:
#+begin_src powershell
if (-Not (Test-Path -Path $paths)) {
   # Logic
}
#+end_src
** Databases
*** Postgres SQL
**** Alter user role in Postgres
***** Change role
Alter the role afterwards - ~ALTER ROLE rast999 WITH CREATEDB CREATEROLE LOGIN REPLICATION;~
***** Set a new password
Setting new password is the same ~ALTER ROLE sample WITH PASSWORD 'newpassword';~
*** T-SQL
**** Category of statements in T-SQL
There are 3 base categories of statements in T-SQL:

- DML (Data Manipulation Language) - statements used to insert data (INSERT, UPDATE, DELETE) or query information from database (SELECT)
- DDL (Data Definition Language) - statments used to define the database schema and create tables (CREATE, ALTER, DROP)
- DCL (Data Control Language) - statements used to manage users and their permissions (GRANT, REVOKE, DENY)
**** 3VL or Ternary logic
Ternary logic in T-SQL represents predicates which may have 3 values:

1. TRUE
2. FALSE
3. UNKNOWN :: *UNKNOWN value is used when one of the operands is NULL*

Rules of ternary logic:

Any comparison of 2 =UNKNOWNs= is also =UNKNWON=
Comparison of any =KNOWN= value to =UNKNOWN= value is also =UNKNOWN=
A State predicate (a str    ict Yes or No question), always evaluates to =TRUE= or =FALSE=
**** Aggregate functions
Aggregate functions are the ones that take multiple values, and return a single value. Examples of aggregate functions:

1. MAX
2. MIN
3. AVG
4. COUNT

Source: https://docs.microsoft.com/en-us/sql/t-sql/functions/aggregate-functions-transact-sql?view=sql-server-ver16
**** CASE operator
#+begin_src sql
SELECT name,
    CASE WHEN (monthlymaintenance > 100) THEN
      'expensive'
    ELSE
      'cheap'
    END AS cost
    FROM cd.facilities;
#+end_src

Will return something like this:

|--------+-----------|
| name   | cost      |
|--------+-----------|
| Court1 | cheap     |
| Court2 | expensive |
|--------+-----------|
** Elisp (emacs-lisp)
*** Hello world
#+begin_src elisp
  (print "Hello world")
#+end_src
*** Working with buffers
There are several function for working with buffers

#+begin_src elisp :eval no
  ;; returns the buffer name
  (buffer-name)

  ;; returns the file name associated with the buffer
  (buffer-file-name)

  ;; returns the current buffer object
  (current-buffer)

  ;; returns the buffer object used before current-buffer
  (other-buffer)

  ;; Get buffer by name
  (get-buffer "*scratch*")

  ;; Switching to another buffer
  ;; Same as when pressing C-x b <buffer-name>
  (switch-to-buffer (other-buffer))

  ;; Set current buffer to...
  (set-buffer (other-buffer))
#+end_src

#+RESULTS:
: #<buffer init.el>
**** Buffer size and cursor

Determining the buffer size and the position of the cursor

#+begin_src elisp
  ;; Getting buffer size
  (buffer-size (current-buffer))

  ;; Getting the position of the cursor in the current buffer
  (point)

  ;; Getting the minimum position of the pointer (always 1?)
  (point-min)

  ;; Getting the max possible position of the pointer (always = buffer-size + 1?)
  (point-max)
#+end_src

#+RESULTS:
: 9074
*** Defining functions in emacs lisp
Function definition parts:
#+begin_example
(defun FUNCTION-NAME (ARGUMENTS...)
  "OPTIONAL-DOCUMENTATION..."
  (interactive ARGUMENT-PASSING-INFO)     ; optional
  BODY...)
#+end_example
*** Interactive functions in emacs lisp
An interactive function is a simple function with ~(interactive)~ specified in
it's definition

#+begin_src elisp
  (defun multiply-by-seven (number)
    "This function simply multiplies a number by 7"
    (interactive "p")
    (message "Result is %d" (* number 7)))
#+end_src

#+RESULTS:
: multiply-by-seven
**** Interactive arguments
There are more characters that can be passed to ~interactive~ as arguments.
See [[info:elisp#Interactive Codes][info:elisp#Interactive]]
*** Predicates and boolean tests in elisp
:PROPERTIES:
:ID:       1d004eef-7276-403b-9ac8-d311d619f3e4
:END:
Any predicates in elisp return either ~nil~ or anything else.
In fact, =false= value is just ~nil~. Anything else is interpreted as =true=.
*** Elisp ~if~ keyword :ATTACH:
:PROPERTIES:
:ID:       4eae3b16-b29e-46f2-9a54-af8448d62550
:END:
The if keyword can be used as follows in elisp:
For details on how =test= part decides where to go, see [[id:1d004eef-7276-403b-9ac8-d311d619f3e4][Predicates and boolean tests in elisp]]

#+begin_src elisp
  (defun test-point ()
    "Showcasing 'if' usage"
    (let ((pos (point)))
            (if (> pos 10)
                (message "Point is at position %d" pos
              (message "Point position too low (%d)" pos)))))
  (test-point)
#+end_src

#+RESULTS:
: Point is at position 13103

*** Elisp ~save-excursion~ function :ATTACH:
:PROPERTIES:
:ID:       1ee370d2-d148-4622-b815-054c11cf0630
:END:
This is a useful function that will evaluate some expressions from it's budy,
then after everything is evaluated, it will restore the original point
position so the user doesn't notice anything. It is useful in functions that
need to manupulate the point, or switch buffers, but user doesn't expect the
changed position as a side-effect.

The template for this function looks like this

#+begin_example
(save-excursion
  FIRST-EXPRESSION-IN-BODY
  SECOND-EXPRESSION-IN-BODY
  THIRD-EXPRESSION-IN-BODY
   ...
  LAST-EXPRESSION-IN-BODY)
#+end_example
** Sharepoint
*** API permissions setup in sharepoint
Setup Graph API permissions

In ~/config/package-solution.json~ add following:

#+begin_src js
...
"webApiPermissionRequests": [
      {
        "resource": "Microsoft Graph",
        "scope": "User.ReadBasic.All"
      }
    ]
...
#+end_src
** Rust
:PROPERTIES:
:ID:       fb389731-9b2f-4380-98af-21ad3e832e66
:END:
*** Resources
- https://github.com/joaocarvalhoopen/How_to_learn_modern_Rust
- [[https://www.rust-lang.org/learn]]
- [[https://www.freecodecamp.org/news/rust-in-replit/]]
- [[https://youtube.com/c/JonGjengset]]
- [[https://dystroy.org/blog/how-not-to-learn-rust/]]
- [[https://cheats.rs/]]
- [[https://learning-rust.github.io/docs/d1.code_organization.html]]
*** Cargo
Cargo is the [[id:fb389731-9b2f-4380-98af-21ad3e832e66][Rust's]] package manager.

Documentation can be found at https://doc.rust-lang.org/cargo/
