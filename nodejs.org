#+title: Nodejs
* Node js and Javascript
:PROPERTIES:
:ID:       6c94391a-b52c-4308-93bc-d770b29857fc
:END:
** Typescript
:PROPERTIES:
:ID:       2291a412-ed3a-4b26-a489-ab11deafee44
:END:
For basic documentation on typescript see the [[https://www.typescriptlang.org/docs/handbook/2/basic-types.html][Documentation]]
*** Init project
In order to initialize a new typescript project, run ~tsc --init~ This will generate a default ~tsconfig.json~ file. In case you want to add webpack with typescript, see [[id:941042b8-f74c-45a2-880c-f34d4b3927ff][Add typescript to webpack]]
*** Compilation
Compilation of files can be done in any of the following ways:

- ~tsc~ to compile the nearby project (recognized via [[id:da390266-7df1-4692-80eb-e19a3df1c11e][tsconfig]].
- ~tsc somfile.ts~ compile a single file
- ~tsc --project othertsconfig.json~
- ~tsc index.js --declaration --emitDeclarationOnly~
- ~tsc src/*.ts~ compile all .ts files in ~src~ folder.
- ~tsc one.ts two.ts --target esnext --outFile index.js~ combine two files
*** Config file
:PROPERTIES:
:ID:       da390266-7df1-4692-80eb-e19a3df1c11e
:END:
Typescript is configured with ~tsconfig.json~

Same as ~package.json~ for typescript. Specifies options for Typescript compilation.

**** Useful properties
- ~target~ will specify to which features in your code will get downgraded. For example ~${temlate} string~ might be downgraded to string concatenation. Using ~es6~ is a strong choice, but all depends.
- ~module~ - which module type is generated? (CommonJs, ES modules, etc...)
- ~noImplicitAny~ - will throw an error in all places where type is ~any~ or is implicitly made ~any~.
- ~strictNullChecks~ - helps to handle ~null~ and ~undefined~, especially in cases where a value was not initialized and still used
*** Add typescript to webpack
:PROPERTIES:
:ID:       941042b8-f74c-45a2-880c-f34d4b3927ff
:END:
-  Install ~ts-loader~
-  Add a rule to your ~webpack.config.js~

#+begin_src js
rules: [
    {
        test: /.tsx?$/,
        use: [
            {
                loader: 'ts-loader', options: { transpileOnly: true }
            }
        ]
    }
]
#+end_src

You might want to add this to your ~webpack.config.js~ as well:

#+begin_src js
module.exports {
    // ...
    entry: //...
    // ...
    resolve: {
        extensions: ['.ts', '.js'],
    },
    // ...
}
#+end_src
*** Resources
Resources on typescript:
- Documentation: [[https://www.typescriptlang.org/docs/handbook/intro.html]]
*** Classes
Classes documentation can be found [[https://www.typescriptlang.org/docs/handbook/2/classes.html][here]]
*** Functions
**** Call signature
:PROPERTIES:
:ID:       b27f6b66-2d4c-4746-8b5b-1829d6b70b31
:END:
If you want to have a callable object type with some properties in [Typescript](https://andreid049.github.io/no-brainer//#Typescript), you need a `call sugnature`

#+begin_src js
type CallableWithProps = {
    property: string;
    (name: string): void;
}

function doSomething(fn: CallableWithProps) {
   console.log(fn.property);
   fn("test");
}
#+end_src

#+RESULTS:
**** Function narrowing
:PROPERTIES:
:ID:       8aead2c5-0974-4e44-9013-58e61b9e1a01
:END:
***** Type guards
Narrowing happens in Typescript when we have multiple possible types, and we narrow the possibilities by checking for concrete types:
#+begin_src js
function narrow(a: string | number) {
    if (typeof a === "string") {
        // here typescript knows that a is a string
        return a.toLowerCase();
    }
    // here, a is number for sure.
    return a + 2;
}
#+end_src

The ~if (typeof ...)~ check is also called a ~type guard~.
Besides ~typeof~ there is also ~insanceof~ narrowing, used for objects constructed with new.

***** Equality narrowing

You can also narrow types by comparing them:

#+begin_src js
function test(a: string | number, b: string | boolean) {
    if (a === b) {
        // here, because a is equal to b,
        // we know that their types are the same
        // and their only common type is string
        // so both a and b are strings
        return a.toLowerCase() + b.toLowerCase();
    }
    // ...
}
#+end_src
You can use any kind of equality checks ~===~, ~!==~, ~==~, ~!=~ etc.

***** `in` narrowing

Javascript ~in~ keyword can be used to narrow types:

#+begin_src js
type Bird = { fly: () => void };
type Fish = { swim: () => void };

function doSomething(animal: Bird | Fish) {
    if ("fly" in animal) {
        // Here we have a Bird for sure
        animal.fly();
    } else {
        animal.swim();
    }
}
#+end_src

***** Type predicates
Type predicates in Typescript are functions that help with type Typescript function narrowing. It has some special syntax.

#+begin_src js
function isBird(animal: Fish | Bird): animal is Bird {
    return (animal as Bird).fly !== undefined;
}
#+end_src

This special syntax ~animal is Bird~ helps type narrowing:

#+begin_src js
function test(animal: Bird | Fish) {
    if (isBird(animal)) {
        // here animal is definetly Bird
    }
}
#+end_src

***** Discriminating unions
:PROPERTIES:
:ID:       cdb817ba-6251-436b-a7d1-c09eaf7fcdae
:END:
If a Union types in typescript contains types which all have a common property of some literal type, this property can be used for narrowing.

#+begin_src js
    type Circle = {
        kind: "circle"; // literal Type
        radius: number;
    };

    type Square = {
        kind: "square"; // literal Type
        side: number;
    };

    type Shape = Circle | Square;

    function testShape(shape: Shape) {
        if (shape.kind === "circle") {
            // here shape is a Circle
        } else {
            // and here it's a Square
        }
    }
#+end_src
***** =Never= type
When narrowing, if all types were already excluded, value is assigned the ~never~ type. Also, functions that throw an exception have the ~never~ type
**** Constructor signature
In [[id:2291a412-ed3a-4b26-a489-ab11deafee44][Typescript]] you can declare constructor functions (the ones you can call with `new`) like below.

#+begin_src js
type Example = {
    new (prop: string): SomeObject;
}
#+end_src

You can also combine it with [[id:b27f6b66-2d4c-4746-8b5b-1829d6b70b31][Call signature]]
**** Parameter descructuring
When object parameters are passed to functions, those parameters can be destructured:

#+begin_src js
function fromObj({name, age}: {name: string, age: number}) {
    // use the paramters
}

fromObj({name: "Andrei", age: 27});
#+end_src
*** Union types
:PROPERTIES:
:ID:       9d36525f-8a62-4dcc-a436-2b5fb5d2f0d4
:END:
Union types is a way to specify that a value can be any one of union members types. Example ~string | number~ type implies that value is either ~string~ or ~number~.

When we have a union type, it means we can use only properties that are common to \*\*every\*\* type in that union. For example, having variable ~thing~ of type ~string | number~, we cannot just write ~thing.toUpperCase()~ because type ~number~ doesn't have this method.

In order to work around this, we need to convince Typescript that it's actually the correct type (this is called [[id:8aead2c5-0974-4e44-9013-58e61b9e1a01][Function narrowing]]:

#+begin_src js
// thing is of type `string | number`
if (typeof thing === 'string') {
 // here we are sure think is a string
 console.log(thing.toUpperCase());
} else {
 // thing is a number
 console.log(thing.toFixed(1));
}
// ...
#+end_src
Also, you can use functions like ~Array.isArray~
*** Extending types
Extending types works the same way as with classes:

#+begin_src js
interface Person {
    name: string;
    age: number;
}
#+end_src

#+begin_src js
interface Employee extends Person {
    salary: number;
}
#+end_src
extending multiple types is also possible.
*** Interfaces
Interfaces are similar, and mostly interchangeable with Type aliases.

//**Advise**: use interfaces where you can//

Example:
#+begin_src typescript
    interface IDisposable {
        dispose(): void;
    };
#+end_src
*** Literal types
Literal types are types consisting of literal values (obviously).

Example:
~const value = "hello"~, it's type will be ~"hello"~
Or we can write ~let value: "hello" = "hello"~ . Then if i try to assign any other value to this variable, it will complain.
Very useful together with [[id:9d36525f-8a62-4dcc-a436-2b5fb5d2f0d4][Union types]] to declare types that can have only certain values. The ~Typescript keyof operator~ will produce a ~literal union type~ of all object's properties

#+begin_src typescript
type direction = "up" | "down" | "left" | "right";
#+end_src

You can have ~number~ literal types too (~1 | 2 | 3 | 4~).
*** Null assertion operator
Typescript ~null-assertion operator~ (also called the ~postfix ! operator~) helps assuring Typescript that value is not null. This does absolutely nothing at runtime, so you have to be sure value is really not null.

#+begin_src typescript
function get(obj: { value: number } | null) {
    return obj!.value; // because of '!', typescript believes me it's not null
}
#+end_src
** Add eslint to project
- Install eslint – ~npm i -D eslint~
- Run – ~npx eslint --init~
- Choose appropriate steps in the wizard
** Jest
:PROPERTIES:
:ID:       4e8cb1ee-18bb-478d-85be-62a166b71cd0
:END:
Popular testing framework in JavaScript and node.

Examples and docs: [[https://jestjs.io/][https://jestjs.io/]]
*** Add jest to a project (with babel)
1.  Install [[id:4e8cb1ee-18bb-478d-85be-62a166b71cd0][Jest]] with ~npm i -D jest~
2.  If you wish to use Babel, for example you want typescript - ~npm i -D babel-jest @babel/core @babel/preset-env~ and add to ~babel.config.js~:

#+begin_src js
module.exports = {
  presets: [['@babel/preset-env', {targets: {node: 'current'}}]],
};
#+end_src
*** Add typescript to jest
:PROPERTIES:
:ID:       1a22ee81-6d10-474b-b741-e1c8021a330c
:END:
If you want to add typescript support, ~npm i --D @babel/preset-typescript @types/jest~

Then add ~@babel/preset-typescript~ to the list of presets in your ~babel.config.js~.

#+begin_src js
module.exports = {
  presets: [
    ['@babel/preset-env', {targets: {node: 'current'}}],
    '@babel/preset-typescript', // <-- this
  ],
};
#+end_src
*** Install
:PROPERTIES:
:ID:       3a35f0d1-34f1-46b8-bbe5-eba868516ae5
:END:
~npm i -D jest @types/jest~
*** Stub irrelevan files
Some files are not needed while testing with Jest, like ~.png~ or ~.scss~ files.

In order to stub them, add following to your ~jest.config.js~:

#+begin_src js
// A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module
"moduleNameMapper": {
    "\\.(css|less|scss)$": "<rootDir>/__mocks__/styleMock.js",
    "\\.(gif|ttf|eot|svg|png)$": "<rootDir>/__mocks__/fileMock.js",
},
#+end_src

And create respective files
#+begin_src js
/** styleMock.js */
module.exports = {};
#+end_src

#+begin_src
/** fileMock.js */
module.exports = 'test-file-stub';
#+end_src
*** With @testing-library
As oposed to enzyme, you can use @testing-library with jest.

1. [[id:3a35f0d1-34f1-46b8-bbe5-eba868516ae5][Install]], or if you want typescript [[id:1a22ee81-6d10-474b-b741-e1c8021a330c][Add typescript to jest]]
2.  ~npm i -D @testing-library/react @testing-library/jest-dom~ (you might need to install a lower version of @testing-library/react if it complains about 'react-dom')
3.  If you're using babel, ~npm i -D @babel/preset-react~ and add it to ~babel.config.js~
4.  Start writing tests, see their example and cheatsheet
*** Testing react with enzyme
In order to test react components, install ~enzyme~:
~npm i -D enzyme enzyme-adapter-react-16 @types/enzyme jest-environment-jsdom~

Create following setup files:

#+begin_src js
// ./tests/setupTest.js
const { configure } = require("enzyme");
const Adapter = require("enzyme-adapter-react-16");
configure({ adapter: new Adapter() });
```

Then add this to your `jest.config.js`
#+end_src

#+begin_src js
// The paths to modules that run some code to configure or set up the testing environment before each test
setupFiles: ["./tests/setupTest.js"],
#+end_src
** Add prettier to project
*** Install

~npm i -D prettier~

*** Config file

#+begin_src js
// prettier.config.js or .prettierrc.js
module.exports = {
  trailingComma: "es5",
  tabWidth: 4,
  semi: true,
  singleQuote: true,
};
#+end_src
** Webpack
:PROPERTIES:
:ID:       30de9951-46cc-45cc-8d74-98d53664569b
:END:
Webpack is a code bundler
*** Add Webpack to a project
To add [[id:30de9951-46cc-45cc-8d74-98d53664569b][Webpack]] to your project:

1.  ~npm i -D webpack webpack-cli [webpack-dev-server]~
2.  Create a ~webpack.config.js~

#+begin_src js
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
    mode: 'development',
    entry: __dirname + '/index.ts',
    output: {
        path: __dirname + '/dist',
        filename: 'index.js',
        publicPath: '/'
    },
    resolve: {
        extensions: ['.ts', '.js'],
    },
    module: {
        rules: [ ]
    },
    // this plugin is necessary if you want your bundle to be added to a html while developing
    plugins: [
        new HtmlWebpackPlugin({
            template: __dirname + '/public/index.html',
            inject: 'body',
            publicPath: __dirname + '/public'
        })
    ],
}
#+end_src
*** Creating a umd library using webpack
To create a library that exposes a variable like jquery, using Webpack, but also is available as a common js module:

In your js/ts file, export the necessary functions:
#+begin_src js
export default function a(text) {
    console.log(text);
}
#+end_src

In your config file:
#+begin_src js
module.exports = {
  mode: // ...,
    // ...
  output: {
        // ...
    globalObject: 'this', // <-- this is needed so library can be required as a commonjs module
    library: {
      name: 'myLibraryName', // <-- this variable will be exposed by your bundle
      type: 'umd',
    },
  },
#+end_src

Then you can include it in your html:
#+begin_src html
<script src="https://example.org/path/to/mybundle.js"></script>
<script>
  myLibraryName.a('webpack');
</script>
#+end_src

Or js:
#+begin_src js
const myLib = require('myLibrary');
#+end_src

See:
- [[https://webpack.js.org/configuration/output/#outputlibrary]]
- [[https://webpack.js.org/guides/author-libraries/]]
- [[https://webpack.js.org/configuration/output/#outputglobalobject]]

** Common js modules :modules:
:PROPERTIES:
:ID:       e1aa913b-d8b0-44df-b244-c1e4e6c201af
:END:
Common js modules are the modules using require function. This is the native mechanism used in [[id:6c94391a-b52c-4308-93bc-d770b29857fc][Node js]]. (at least it was before Es modules appeared). Each file is considered a module. Objects like require, module and others are available thanks to Module wrapping.
*** Module wrapping
Before a commonjs module is executed, it's contents are wrapped in a function. It looks approximatively like this:

#+begin_src js
(function(exports, require, module, __filename, __dirname) {
 /* Module contents */
});
#+end_src

This helps encapsulation, and provides useful local variables:

-   ~exports~: alias for ~module.exports~
-   ~require~: function for requiring other modules. Require returns the common js module's ~exports~ object.
-   ~module~: reference to the current module
-   ~__filename~ and ~__dirname~: representing current filename and directory name
*** The ~.mjs~ extension
It is not possible to ~require()~ files that have the ~.mjs~ extension. Attempting to do so will throw an error. The .mjs extension is reserved for ~Es modules~ which cannot be loaded via ~require()~.
*** Module resolution
If exact file name is not found. Node.js will attempt to find a file with ~.js~, ~.json~, or ~.node~ extensions.

Also, depending on path prefix:
- ~/~ means path to the module is absolute
- ~./~, ~../~ etc. means path to the module is relative
- if there is no prefix, it's either a core module (ex: path), or it will be looked up in node_modules folder If none of above work, ~require~ will throw a ~MODULE_NOT_FOUND~ exception.

In order for Node js to be able to recognize a folder as a module, it should meet any of below criteria:
- Folder should have a `package.json` with a `main` field in it. In below case, `require('./my-module')` will load and run `./my-module/lib/my-module.js`
#+begin_src js
{
  "name": "my-module",
  "main: "./lib/my-module.js"
}
#+end_src

- In case no ~package.json~ is found, Node.js will look for ~index.js~ or ~index.node~ files.
*** Common js cycle
Sometimes common js modules depend on one another. In this case, an object might receive a dependency that was not loaded completely. For example:

~a.js~:
#+begin_src js
console.log('a starting');
exports.done = false;
const b = require('./b.js');
console.log('in a, b.done = %j', b.done);
exports.done = true;
console.log('a done');
#+end_src

~b.js~:
#+begin_src js
console.log('b starting');
exports.done = false;
const a = require('./a.js');
console.log('in b, a.done = %j', a.done);
exports.done = true;
console.log('b done');
#+end_src

~main.js~:
#+begin_src js
console.log('main starting');
const a = require('./a.js');
const b = require('./b.js');
console.log('in main, a.done = %j, b.done = %j', a.done, b.done);
#+end_src

The output of above will be:
#+begin_src text
main starting
a starting
b starting
in b, a.done=false
b done
in a, b.done=true
a done
in main, a.done = true, b.done = true
#+end_src
*** Explicit Rules
Node will determine a package as commonjs by default.

To specify it explicitly:
- use ~.cjs~ file extension
- specify ~"type": "commonjs~ in package.json
- provide a command line argument when running node ~--input-type=commonjs~
** Conditional import
:PROPERTIES:
:ID:       76f572b9-74d7-469e-a37b-320c03dbd319
:END:
In package.json, it is possible to define aliases for imports, and apply them conditionally depending on environment that is being run, or how the package is imported (with ~require~ or ~import~)

#+begin_src js
...
"imports": {
  "#parser": {
    "import": "./src/parser.mjs",
    "require": "./src/parser.cjs",
    "node": "node-parser", // should always come after import or require
    "default:": "./src/parser-not-found.js" // should always come last
  }
}
...
#+end_src

Usage:
#+begin_src js
// if used from node, 'node parser will be imported'
import default from '#parser';

// if not used from node, and imported, will look for ./src/parser.mjs
import default from '#parser';

// if required, will look for ./src/parser.cjs
const { default } = require('#parser');

// in any other cases, wil load ./src/parser-not-found.js
#+end_src

- **Note**: that the imported entry must start with ~#~ in order to avoid conflicts with Bare specifiers (see [[id:e0d4bd08-3ac8-45f8-80cf-8c97fd2fbdea][Import specifiers]])
** Conditional export
Example, different files are loaded if package is ~import'ed~ or ~require'd~: Same rules as in [[id:76f572b9-74d7-469e-a37b-320c03dbd319][Conditional import]]

#+begin_src js
// ./node_modules/pkg/package.json
{
  "type": "module",
  "main": "./index.cjs",
  "exports": {
    "import": "./index.mjs",
    "require": "./index.cjs"
  }
}
#+end_src

** Import specifiers
:PROPERTIES:
:ID:       e0d4bd08-3ac8-45f8-80cf-8c97fd2fbdea
:END:
Import specifiers represent the strings that can be used within Es modules (after ~from~ keywork in ~import~ statement), or with ~import()~ in [[id:dd393aee-ef6c-4800-9d92-0d332f8cc4ff][Dynamic import]]

There are 3 types of import specifiers:
1. Relative specifiers - like ~./some-package/index.js~
2. Bare specifier - like ~fs~ or ~axios~
3. Absolute specifiers - like ~file:///opt/file/example.js~
** Dynamic import
:PROPERTIES:
:ID:       dd393aee-ef6c-4800-9d92-0d332f8cc4ff
:END:
Normally, with Static import, code of the loaded packages is evaluated at load time. Dynamic import is a mechanism useful when you want to import something conditionally, and evaluate the code at run time, like:

#+begin_src js
if (somethingIsTrue) {
 import('./some-package/index.js').then((package) =>
  /* do something */);
} else {
 import('./some-other-package/index.js').then((package) =>
 /* do something else */);
}
#+end_src

It is used by calling ~import~ as a function and providing. It returns a ~Promise~ containing the imported package. Also, you can ~await~ a dynamic import with a top level await (Experimental). Using dynamic imports, you can use es modules from CommonJs modules modules or vice versa.

**WARNING**: using Dynamic import disables such useful features as Tree shaking done by static analyzers. Use it wisely.
** Data attributes
Data attributes are special type of html attributes:

#+begin_src html
<a data-open="true" href="...">...
#+end_src

From js, this attribute can be accessed by using ~.getAttribute()~ specifying the full name ~data-open~. But there is a more convenient way: using the ~dataset~ property. You could access it like this ~el.dataset.open~.
** ES modules :modules:
ECMAScript is the official standard format to package [[id:6c94391a-b52c-4308-93bc-d770b29857fc][Node js and Javascript]] code for reuse.

- To understand how to start working with es modules in Node js, see [[id:da344721-889a-4137-b8f4-1e8f9e17b913][Enabling ES modules]]
- To see what kind of strings you can provide to ~import * from ...~ [[id:e0d4bd08-3ac8-45f8-80cf-8c97fd2fbdea][Import specifiers]]
- You can import Common js modules from Es modules but not vice versa. (see [[id:c88a22ce-56a6-4060-86e9-b1f3cb6a74f7][How to import cjs (commonjs) from ejs (ecmascript) modules]])
- For differences between Es modules and Common js modules, see Es modules vs commonjs modules
- Resolver algorithm is quite confusing, but can be found [[ https://nodejs.org/docs/latest-v15.x/api/esm.html#esm_resolver_algorithm][here]]

*** Mandatory file extensions
To match the way files are referenced in the browser, file extensions must be used

*** ~import.meta~ properties
There is a ~import.meta.url~ property which provides a link to the current module file.
*** Enabling ES modules
:PROPERTIES:
:ID:       da344721-889a-4137-b8f4-1e8f9e17b913
:END:
Default module in Node js at the moment of writing is [[id:e1aa913b-d8b0-44df-b244-c1e4e6c201af][Common js modules. To enable features of Es modules:

-   change the file extension to ~.mjs~
-   add to your [package.json](https://andreid049.github.io/no-brainer//#Package%20json) following line: ~"type": "module"~
-   use node command line argument ~--input-type=module~
*** ES modules vs CommonJS modules
[[Source][https://nodejs.org/docs/latest-v15.x/api/esm.html#esm_differences_between_es_modules_and_commonjs]]

Differences:
- No ~require~, ~module~ or ~module.exports~ variables
- No ~__filename~ or ~__dirname~
- No Json modules loading
- No native module loading
- No ~NODE_PATH~
- No ~require.extensions~
- No ~require.cache~. Es modules use their own cache
*** How to import cjs (commonjs) from ejs (ecmascript) modules
:PROPERTIES:
:ID:       c88a22ce-56a6-4060-86e9-b1f3cb6a74f7
:END:
You can import Common js modules to Es modules and vice versa using [[id:dd393aee-ef6c-4800-9d92-0d332f8cc4ff][Dynamic import]].
But be carefull, there are performance considerations to this.
** Rollup
*** Example Rollup config
**** Installation
#+begin_src sh
npm i -D rollup rollup-plugin-typescript2 rollup-plugin-visualizer rollup-plugin-size-snapshot rollup-plugin-terser @rollup/plugin-node-resolve rollup-plugin-peer-deps-external
#+end_src
**** Example config file                                          :ATTACH:
:PROPERTIES:
:ID:       cb0d3385-4def-4771-8478-978dc254a7c8
:END:
Copy [[attachment:rollup.config.js][config]] to project
** Falsy values
Values that evaluate to ~false~ in Javascript

1. 0
2. NaN
3. "" (empty string)
4. 0n (the bigint version of 0)
5. null
6. undefined
** Lerna
*** Lerna scope multiple packages
Example:
#+begin_src sh
lerna run build --scope '{sp-preset,*notificat*,*proper*}'
#+end_src
** Next js :next:
Next js is a library for creating Backend and frontend for:
- ~Statically generated sites~ (generated at build time). See [Next js static generation](https://andreid049.github.io/no-brainer//#Next%20js%20static%20generation)
- ~Server-side rendered sites~ (generated at each request on the server) [Next js server side rendering](https://andreid049.github.io/no-brainer//#Next%20js%20server%20side%20rendering)
- ~Client-side generated data~ is fetched on the server and DOM is created on the client
- Next js can be setup by editing ~next.config.js~, for example new rules can be added to Webpack config. See Next js webpack config

*** How to read local files
To read local files - use ~process.cwd()~. Because ~__dirname~ doesn't work.
*** Routing
It's possible to access the ~router~ object in your react component (via ~useRouter~ hook from ~next/router~). You can use it mostly like react-router, ex: ~router.push('/some-path')~.

There are 3 types of routes:

1.  Predefined routes. When the file is created on the server and is not generated dynamically.
2.  Dynamic routes. Routes using dynamic parameters, for example ~/pages/posts/[id].js~ will match ~/posts/124~, and ~/posts/234~ etc.. (see [[id:b0fc8c8d-ef31-4185-8fd1-a30cb58c9288][Static site generation]] for more info)
3.  Catch all routes. They are created as ~[...slug].js~ with 3 dots. For example ~/pages/posts/[...slug].js~ will match any route like ~/posts/a~, and ~/posts/a/b~ and so on. A catch-all route can also be made \_optional\_ using double square brackets. Example: ~/posts/pages/[[...slug]].js~. This means that it can also catch the ~/posts/pages~ route (without any parameters)

The parameters passed to dynamic or catch-all routes can be accessed in ~router.query~. For catch-all, the parameter will always be an ~array~.

Note: Predefined routes take precedence over dynamic routes, and dynamic routes over catch all routes.
*** Static site generation
:PROPERTIES:
:ID:       b0fc8c8d-ef31-4185-8fd1-a30cb58c9288
:END:
Command used to start the generation `next build && next export`.

**** Generation with data
When you need to call some API, or to get some other data before rendering the page, you can have 2 situations:

1. Your page's **content** depends on some parameters
2. Your page's **path** (and most often **content**) depends on some parameters

For first situation: create ~export async function getStaticProps()~, which returns following object:

#+begin_src typescript
interface StaticProps {
    props: {
        // here are the props that your component needs
        // for example:
        // posts: ...
        // id: ...
    }
}
#+end_src

This function can go to a database, call some api, or read some local files to determine the props. For extra things that can be returned see [[https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation][documentation]]

For cases when you need also a different path to be fetched, use ~export async function getStaticPaths()~, which returns following:

#+begin_src typescript
interface StaticPaths {
    paths: {
        params: {
            // here are the path properties
            // for example:
            // id: someid
        }
    }
}
#+end_src

In this case, your ~getStaticProps~ will get an argument, for each ~path~ (ex ~{ params: { id: 1 } }~) returned by ~getStaticPaths~:

#+begin_src typescript
function getStaticProps(path) { //...
#+end_src

Same as for ~getStaticProps~, ~getStaticPaths~ will probably consult some external data storage.

**** Exceptions
~next/image~ package cannot be used with static generation

**** Reading local files
TLDR: use ~process.cwd()~

**** References
1. https://nextjs.org/docs/basic-features/pages#static-generation-with-data
*** Webpack config
In order to add new rules to [[id:30de9951-46cc-45cc-8d74-98d53664569b][Webpack]] config, add this to ~next.config.js~:

#+begin_src js
module.exports = {
  reactStrictMode: true,
  webpack: (config) => {
    config.module.rules.push({ // here we are adding a new rule to webpack
      test: /\.svg$/,
      use: ["@svgr/webpack"]
    });
    return config;
  }
};
#+end_src
** Nodejs assert
Node.js standard module to handle assertions.

-   ~assert.deepStrictEqual~: check for equality
-   ~assert.strictEqual~: same but not deep
-   ~assert.ok~: check if value is truthy
-   ~assert.throws~: checks if function will throw
** package.json
Important fields in ~package.json~:

- **name**: used for named imports as the name of the package
- **type**: can be "module" or "commonjs". Specifies how Node js modules are treated when imported. The "type" fields specifies not only how the entry point file is treated, but also all files that are imported in it. If omitted, default type is commonjs.
- **main**: Specifies the entry point of the package.
- **exports**: Same as "main", but with extra features. "main" is supported in older version of node, while "exports" is a newer feature. It can be a path or a list of paths that are exported by the package. Other files will not be exported. Conditional exports based on environment and how package is imported are possible, see Conditional module export.
- **imports**: additionally to exports, it is possible to define internal import aliases, and interchange them conditionally.
- **types**: if you're using [[id:2291a412-ed3a-4b26-a489-ab11deafee44][Typescript]], then you will want to specify this field and point it to a ~.d.ts~ file. This way, users importing your package from typescript can benefit from type definitions.
